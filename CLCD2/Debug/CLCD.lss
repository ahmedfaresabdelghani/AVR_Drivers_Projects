
CLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00001abc  00001b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001abc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001338  00000000  00000000  00001b38  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bd2  00000000  00000000  00002e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00003a42  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00003b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00003cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000593b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00006826  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000075d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00007734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000079c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000818f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec eb       	ldi	r30, 0xBC	; 188
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a8 30       	cpi	r26, 0x08	; 8
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
      8a:	0e 94 89 0a 	call	0x1512	; 0x1512 <main>
      8e:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <_exit>

00000092 <__bad_interrupt>:
      92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__fixunssfsi>:
      96:	ef 92       	push	r14
      98:	ff 92       	push	r15
      9a:	0f 93       	push	r16
      9c:	1f 93       	push	r17
      9e:	7b 01       	movw	r14, r22
      a0:	8c 01       	movw	r16, r24
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 4b 03 	call	0x696	; 0x696 <__gesf2>
      ae:	88 23       	and	r24, r24
      b0:	8c f0       	brlt	.+34     	; 0xd4 <__fixunssfsi+0x3e>
      b2:	c8 01       	movw	r24, r16
      b4:	b7 01       	movw	r22, r14
      b6:	20 e0       	ldi	r18, 0x00	; 0
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	40 e0       	ldi	r20, 0x00	; 0
      bc:	5f e4       	ldi	r21, 0x4F	; 79
      be:	0e 94 c3 01 	call	0x386	; 0x386 <__subsf3>
      c2:	0e 94 ab 03 	call	0x756	; 0x756 <__fixsfsi>
      c6:	9b 01       	movw	r18, r22
      c8:	ac 01       	movw	r20, r24
      ca:	20 50       	subi	r18, 0x00	; 0
      cc:	30 40       	sbci	r19, 0x00	; 0
      ce:	40 40       	sbci	r20, 0x00	; 0
      d0:	50 48       	sbci	r21, 0x80	; 128
      d2:	06 c0       	rjmp	.+12     	; 0xe0 <__fixunssfsi+0x4a>
      d4:	c8 01       	movw	r24, r16
      d6:	b7 01       	movw	r22, r14
      d8:	0e 94 ab 03 	call	0x756	; 0x756 <__fixsfsi>
      dc:	9b 01       	movw	r18, r22
      de:	ac 01       	movw	r20, r24
      e0:	b9 01       	movw	r22, r18
      e2:	ca 01       	movw	r24, r20
      e4:	1f 91       	pop	r17
      e6:	0f 91       	pop	r16
      e8:	ff 90       	pop	r15
      ea:	ef 90       	pop	r14
      ec:	08 95       	ret

000000ee <_fpadd_parts>:
      ee:	a0 e0       	ldi	r26, 0x00	; 0
      f0:	b0 e0       	ldi	r27, 0x00	; 0
      f2:	ed e7       	ldi	r30, 0x7D	; 125
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__prologue_saves__>
      fa:	dc 01       	movw	r26, r24
      fc:	2b 01       	movw	r4, r22
      fe:	fa 01       	movw	r30, r20
     100:	9c 91       	ld	r25, X
     102:	92 30       	cpi	r25, 0x02	; 2
     104:	08 f4       	brcc	.+2      	; 0x108 <_fpadd_parts+0x1a>
     106:	39 c1       	rjmp	.+626    	; 0x37a <_fpadd_parts+0x28c>
     108:	eb 01       	movw	r28, r22
     10a:	88 81       	ld	r24, Y
     10c:	82 30       	cpi	r24, 0x02	; 2
     10e:	08 f4       	brcc	.+2      	; 0x112 <_fpadd_parts+0x24>
     110:	33 c1       	rjmp	.+614    	; 0x378 <_fpadd_parts+0x28a>
     112:	94 30       	cpi	r25, 0x04	; 4
     114:	69 f4       	brne	.+26     	; 0x130 <_fpadd_parts+0x42>
     116:	84 30       	cpi	r24, 0x04	; 4
     118:	09 f0       	breq	.+2      	; 0x11c <_fpadd_parts+0x2e>
     11a:	2f c1       	rjmp	.+606    	; 0x37a <_fpadd_parts+0x28c>
     11c:	11 96       	adiw	r26, 0x01	; 1
     11e:	9c 91       	ld	r25, X
     120:	11 97       	sbiw	r26, 0x01	; 1
     122:	89 81       	ldd	r24, Y+1	; 0x01
     124:	98 17       	cp	r25, r24
     126:	09 f4       	brne	.+2      	; 0x12a <_fpadd_parts+0x3c>
     128:	28 c1       	rjmp	.+592    	; 0x37a <_fpadd_parts+0x28c>
     12a:	a0 e0       	ldi	r26, 0x00	; 0
     12c:	b1 e0       	ldi	r27, 0x01	; 1
     12e:	25 c1       	rjmp	.+586    	; 0x37a <_fpadd_parts+0x28c>
     130:	84 30       	cpi	r24, 0x04	; 4
     132:	09 f4       	brne	.+2      	; 0x136 <_fpadd_parts+0x48>
     134:	21 c1       	rjmp	.+578    	; 0x378 <_fpadd_parts+0x28a>
     136:	82 30       	cpi	r24, 0x02	; 2
     138:	a9 f4       	brne	.+42     	; 0x164 <_fpadd_parts+0x76>
     13a:	92 30       	cpi	r25, 0x02	; 2
     13c:	09 f0       	breq	.+2      	; 0x140 <_fpadd_parts+0x52>
     13e:	1d c1       	rjmp	.+570    	; 0x37a <_fpadd_parts+0x28c>
     140:	9a 01       	movw	r18, r20
     142:	ad 01       	movw	r20, r26
     144:	88 e0       	ldi	r24, 0x08	; 8
     146:	ea 01       	movw	r28, r20
     148:	09 90       	ld	r0, Y+
     14a:	ae 01       	movw	r20, r28
     14c:	e9 01       	movw	r28, r18
     14e:	09 92       	st	Y+, r0
     150:	9e 01       	movw	r18, r28
     152:	81 50       	subi	r24, 0x01	; 1
     154:	c1 f7       	brne	.-16     	; 0x146 <_fpadd_parts+0x58>
     156:	e2 01       	movw	r28, r4
     158:	89 81       	ldd	r24, Y+1	; 0x01
     15a:	11 96       	adiw	r26, 0x01	; 1
     15c:	9c 91       	ld	r25, X
     15e:	89 23       	and	r24, r25
     160:	81 83       	std	Z+1, r24	; 0x01
     162:	08 c1       	rjmp	.+528    	; 0x374 <_fpadd_parts+0x286>
     164:	92 30       	cpi	r25, 0x02	; 2
     166:	09 f4       	brne	.+2      	; 0x16a <_fpadd_parts+0x7c>
     168:	07 c1       	rjmp	.+526    	; 0x378 <_fpadd_parts+0x28a>
     16a:	12 96       	adiw	r26, 0x02	; 2
     16c:	2d 90       	ld	r2, X+
     16e:	3c 90       	ld	r3, X
     170:	13 97       	sbiw	r26, 0x03	; 3
     172:	eb 01       	movw	r28, r22
     174:	8a 81       	ldd	r24, Y+2	; 0x02
     176:	9b 81       	ldd	r25, Y+3	; 0x03
     178:	14 96       	adiw	r26, 0x04	; 4
     17a:	ad 90       	ld	r10, X+
     17c:	bd 90       	ld	r11, X+
     17e:	cd 90       	ld	r12, X+
     180:	dc 90       	ld	r13, X
     182:	17 97       	sbiw	r26, 0x07	; 7
     184:	ec 80       	ldd	r14, Y+4	; 0x04
     186:	fd 80       	ldd	r15, Y+5	; 0x05
     188:	0e 81       	ldd	r16, Y+6	; 0x06
     18a:	1f 81       	ldd	r17, Y+7	; 0x07
     18c:	91 01       	movw	r18, r2
     18e:	28 1b       	sub	r18, r24
     190:	39 0b       	sbc	r19, r25
     192:	b9 01       	movw	r22, r18
     194:	37 ff       	sbrs	r19, 7
     196:	04 c0       	rjmp	.+8      	; 0x1a0 <_fpadd_parts+0xb2>
     198:	66 27       	eor	r22, r22
     19a:	77 27       	eor	r23, r23
     19c:	62 1b       	sub	r22, r18
     19e:	73 0b       	sbc	r23, r19
     1a0:	60 32       	cpi	r22, 0x20	; 32
     1a2:	71 05       	cpc	r23, r1
     1a4:	0c f0       	brlt	.+2      	; 0x1a8 <_fpadd_parts+0xba>
     1a6:	61 c0       	rjmp	.+194    	; 0x26a <_fpadd_parts+0x17c>
     1a8:	12 16       	cp	r1, r18
     1aa:	13 06       	cpc	r1, r19
     1ac:	6c f5       	brge	.+90     	; 0x208 <_fpadd_parts+0x11a>
     1ae:	37 01       	movw	r6, r14
     1b0:	48 01       	movw	r8, r16
     1b2:	06 2e       	mov	r0, r22
     1b4:	04 c0       	rjmp	.+8      	; 0x1be <_fpadd_parts+0xd0>
     1b6:	96 94       	lsr	r9
     1b8:	87 94       	ror	r8
     1ba:	77 94       	ror	r7
     1bc:	67 94       	ror	r6
     1be:	0a 94       	dec	r0
     1c0:	d2 f7       	brpl	.-12     	; 0x1b6 <_fpadd_parts+0xc8>
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	40 e0       	ldi	r20, 0x00	; 0
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <_fpadd_parts+0xe6>
     1cc:	22 0f       	add	r18, r18
     1ce:	33 1f       	adc	r19, r19
     1d0:	44 1f       	adc	r20, r20
     1d2:	55 1f       	adc	r21, r21
     1d4:	6a 95       	dec	r22
     1d6:	d2 f7       	brpl	.-12     	; 0x1cc <_fpadd_parts+0xde>
     1d8:	21 50       	subi	r18, 0x01	; 1
     1da:	30 40       	sbci	r19, 0x00	; 0
     1dc:	40 40       	sbci	r20, 0x00	; 0
     1de:	50 40       	sbci	r21, 0x00	; 0
     1e0:	2e 21       	and	r18, r14
     1e2:	3f 21       	and	r19, r15
     1e4:	40 23       	and	r20, r16
     1e6:	51 23       	and	r21, r17
     1e8:	21 15       	cp	r18, r1
     1ea:	31 05       	cpc	r19, r1
     1ec:	41 05       	cpc	r20, r1
     1ee:	51 05       	cpc	r21, r1
     1f0:	21 f0       	breq	.+8      	; 0x1fa <_fpadd_parts+0x10c>
     1f2:	21 e0       	ldi	r18, 0x01	; 1
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	40 e0       	ldi	r20, 0x00	; 0
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	79 01       	movw	r14, r18
     1fc:	8a 01       	movw	r16, r20
     1fe:	e6 28       	or	r14, r6
     200:	f7 28       	or	r15, r7
     202:	08 29       	or	r16, r8
     204:	19 29       	or	r17, r9
     206:	3c c0       	rjmp	.+120    	; 0x280 <_fpadd_parts+0x192>
     208:	23 2b       	or	r18, r19
     20a:	d1 f1       	breq	.+116    	; 0x280 <_fpadd_parts+0x192>
     20c:	26 0e       	add	r2, r22
     20e:	37 1e       	adc	r3, r23
     210:	35 01       	movw	r6, r10
     212:	46 01       	movw	r8, r12
     214:	06 2e       	mov	r0, r22
     216:	04 c0       	rjmp	.+8      	; 0x220 <_fpadd_parts+0x132>
     218:	96 94       	lsr	r9
     21a:	87 94       	ror	r8
     21c:	77 94       	ror	r7
     21e:	67 94       	ror	r6
     220:	0a 94       	dec	r0
     222:	d2 f7       	brpl	.-12     	; 0x218 <_fpadd_parts+0x12a>
     224:	21 e0       	ldi	r18, 0x01	; 1
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	04 c0       	rjmp	.+8      	; 0x236 <_fpadd_parts+0x148>
     22e:	22 0f       	add	r18, r18
     230:	33 1f       	adc	r19, r19
     232:	44 1f       	adc	r20, r20
     234:	55 1f       	adc	r21, r21
     236:	6a 95       	dec	r22
     238:	d2 f7       	brpl	.-12     	; 0x22e <_fpadd_parts+0x140>
     23a:	21 50       	subi	r18, 0x01	; 1
     23c:	30 40       	sbci	r19, 0x00	; 0
     23e:	40 40       	sbci	r20, 0x00	; 0
     240:	50 40       	sbci	r21, 0x00	; 0
     242:	2a 21       	and	r18, r10
     244:	3b 21       	and	r19, r11
     246:	4c 21       	and	r20, r12
     248:	5d 21       	and	r21, r13
     24a:	21 15       	cp	r18, r1
     24c:	31 05       	cpc	r19, r1
     24e:	41 05       	cpc	r20, r1
     250:	51 05       	cpc	r21, r1
     252:	21 f0       	breq	.+8      	; 0x25c <_fpadd_parts+0x16e>
     254:	21 e0       	ldi	r18, 0x01	; 1
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	59 01       	movw	r10, r18
     25e:	6a 01       	movw	r12, r20
     260:	a6 28       	or	r10, r6
     262:	b7 28       	or	r11, r7
     264:	c8 28       	or	r12, r8
     266:	d9 28       	or	r13, r9
     268:	0b c0       	rjmp	.+22     	; 0x280 <_fpadd_parts+0x192>
     26a:	82 15       	cp	r24, r2
     26c:	93 05       	cpc	r25, r3
     26e:	2c f0       	brlt	.+10     	; 0x27a <_fpadd_parts+0x18c>
     270:	1c 01       	movw	r2, r24
     272:	aa 24       	eor	r10, r10
     274:	bb 24       	eor	r11, r11
     276:	65 01       	movw	r12, r10
     278:	03 c0       	rjmp	.+6      	; 0x280 <_fpadd_parts+0x192>
     27a:	ee 24       	eor	r14, r14
     27c:	ff 24       	eor	r15, r15
     27e:	87 01       	movw	r16, r14
     280:	11 96       	adiw	r26, 0x01	; 1
     282:	9c 91       	ld	r25, X
     284:	d2 01       	movw	r26, r4
     286:	11 96       	adiw	r26, 0x01	; 1
     288:	8c 91       	ld	r24, X
     28a:	98 17       	cp	r25, r24
     28c:	09 f4       	brne	.+2      	; 0x290 <_fpadd_parts+0x1a2>
     28e:	45 c0       	rjmp	.+138    	; 0x31a <_fpadd_parts+0x22c>
     290:	99 23       	and	r25, r25
     292:	39 f0       	breq	.+14     	; 0x2a2 <_fpadd_parts+0x1b4>
     294:	a8 01       	movw	r20, r16
     296:	97 01       	movw	r18, r14
     298:	2a 19       	sub	r18, r10
     29a:	3b 09       	sbc	r19, r11
     29c:	4c 09       	sbc	r20, r12
     29e:	5d 09       	sbc	r21, r13
     2a0:	06 c0       	rjmp	.+12     	; 0x2ae <_fpadd_parts+0x1c0>
     2a2:	a6 01       	movw	r20, r12
     2a4:	95 01       	movw	r18, r10
     2a6:	2e 19       	sub	r18, r14
     2a8:	3f 09       	sbc	r19, r15
     2aa:	40 0b       	sbc	r20, r16
     2ac:	51 0b       	sbc	r21, r17
     2ae:	57 fd       	sbrc	r21, 7
     2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <_fpadd_parts+0x1d4>
     2b2:	11 82       	std	Z+1, r1	; 0x01
     2b4:	33 82       	std	Z+3, r3	; 0x03
     2b6:	22 82       	std	Z+2, r2	; 0x02
     2b8:	24 83       	std	Z+4, r18	; 0x04
     2ba:	35 83       	std	Z+5, r19	; 0x05
     2bc:	46 83       	std	Z+6, r20	; 0x06
     2be:	57 83       	std	Z+7, r21	; 0x07
     2c0:	1d c0       	rjmp	.+58     	; 0x2fc <_fpadd_parts+0x20e>
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	81 83       	std	Z+1, r24	; 0x01
     2c6:	33 82       	std	Z+3, r3	; 0x03
     2c8:	22 82       	std	Z+2, r2	; 0x02
     2ca:	88 27       	eor	r24, r24
     2cc:	99 27       	eor	r25, r25
     2ce:	dc 01       	movw	r26, r24
     2d0:	82 1b       	sub	r24, r18
     2d2:	93 0b       	sbc	r25, r19
     2d4:	a4 0b       	sbc	r26, r20
     2d6:	b5 0b       	sbc	r27, r21
     2d8:	84 83       	std	Z+4, r24	; 0x04
     2da:	95 83       	std	Z+5, r25	; 0x05
     2dc:	a6 83       	std	Z+6, r26	; 0x06
     2de:	b7 83       	std	Z+7, r27	; 0x07
     2e0:	0d c0       	rjmp	.+26     	; 0x2fc <_fpadd_parts+0x20e>
     2e2:	22 0f       	add	r18, r18
     2e4:	33 1f       	adc	r19, r19
     2e6:	44 1f       	adc	r20, r20
     2e8:	55 1f       	adc	r21, r21
     2ea:	24 83       	std	Z+4, r18	; 0x04
     2ec:	35 83       	std	Z+5, r19	; 0x05
     2ee:	46 83       	std	Z+6, r20	; 0x06
     2f0:	57 83       	std	Z+7, r21	; 0x07
     2f2:	82 81       	ldd	r24, Z+2	; 0x02
     2f4:	93 81       	ldd	r25, Z+3	; 0x03
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	93 83       	std	Z+3, r25	; 0x03
     2fa:	82 83       	std	Z+2, r24	; 0x02
     2fc:	24 81       	ldd	r18, Z+4	; 0x04
     2fe:	35 81       	ldd	r19, Z+5	; 0x05
     300:	46 81       	ldd	r20, Z+6	; 0x06
     302:	57 81       	ldd	r21, Z+7	; 0x07
     304:	da 01       	movw	r26, r20
     306:	c9 01       	movw	r24, r18
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	a1 09       	sbc	r26, r1
     30c:	b1 09       	sbc	r27, r1
     30e:	8f 5f       	subi	r24, 0xFF	; 255
     310:	9f 4f       	sbci	r25, 0xFF	; 255
     312:	af 4f       	sbci	r26, 0xFF	; 255
     314:	bf 43       	sbci	r27, 0x3F	; 63
     316:	28 f3       	brcs	.-54     	; 0x2e2 <_fpadd_parts+0x1f4>
     318:	0b c0       	rjmp	.+22     	; 0x330 <_fpadd_parts+0x242>
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	33 82       	std	Z+3, r3	; 0x03
     31e:	22 82       	std	Z+2, r2	; 0x02
     320:	ea 0c       	add	r14, r10
     322:	fb 1c       	adc	r15, r11
     324:	0c 1d       	adc	r16, r12
     326:	1d 1d       	adc	r17, r13
     328:	e4 82       	std	Z+4, r14	; 0x04
     32a:	f5 82       	std	Z+5, r15	; 0x05
     32c:	06 83       	std	Z+6, r16	; 0x06
     32e:	17 83       	std	Z+7, r17	; 0x07
     330:	83 e0       	ldi	r24, 0x03	; 3
     332:	80 83       	st	Z, r24
     334:	24 81       	ldd	r18, Z+4	; 0x04
     336:	35 81       	ldd	r19, Z+5	; 0x05
     338:	46 81       	ldd	r20, Z+6	; 0x06
     33a:	57 81       	ldd	r21, Z+7	; 0x07
     33c:	57 ff       	sbrs	r21, 7
     33e:	1a c0       	rjmp	.+52     	; 0x374 <_fpadd_parts+0x286>
     340:	c9 01       	movw	r24, r18
     342:	aa 27       	eor	r26, r26
     344:	97 fd       	sbrc	r25, 7
     346:	a0 95       	com	r26
     348:	ba 2f       	mov	r27, r26
     34a:	81 70       	andi	r24, 0x01	; 1
     34c:	90 70       	andi	r25, 0x00	; 0
     34e:	a0 70       	andi	r26, 0x00	; 0
     350:	b0 70       	andi	r27, 0x00	; 0
     352:	56 95       	lsr	r21
     354:	47 95       	ror	r20
     356:	37 95       	ror	r19
     358:	27 95       	ror	r18
     35a:	82 2b       	or	r24, r18
     35c:	93 2b       	or	r25, r19
     35e:	a4 2b       	or	r26, r20
     360:	b5 2b       	or	r27, r21
     362:	84 83       	std	Z+4, r24	; 0x04
     364:	95 83       	std	Z+5, r25	; 0x05
     366:	a6 83       	std	Z+6, r26	; 0x06
     368:	b7 83       	std	Z+7, r27	; 0x07
     36a:	82 81       	ldd	r24, Z+2	; 0x02
     36c:	93 81       	ldd	r25, Z+3	; 0x03
     36e:	01 96       	adiw	r24, 0x01	; 1
     370:	93 83       	std	Z+3, r25	; 0x03
     372:	82 83       	std	Z+2, r24	; 0x02
     374:	df 01       	movw	r26, r30
     376:	01 c0       	rjmp	.+2      	; 0x37a <_fpadd_parts+0x28c>
     378:	d2 01       	movw	r26, r4
     37a:	cd 01       	movw	r24, r26
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	e2 e1       	ldi	r30, 0x12	; 18
     382:	0c 94 41 0d 	jmp	0x1a82	; 0x1a82 <__epilogue_restores__>

00000386 <__subsf3>:
     386:	a0 e2       	ldi	r26, 0x20	; 32
     388:	b0 e0       	ldi	r27, 0x00	; 0
     38a:	e9 ec       	ldi	r30, 0xC9	; 201
     38c:	f1 e0       	ldi	r31, 0x01	; 1
     38e:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__prologue_saves__+0x18>
     392:	69 83       	std	Y+1, r22	; 0x01
     394:	7a 83       	std	Y+2, r23	; 0x02
     396:	8b 83       	std	Y+3, r24	; 0x03
     398:	9c 83       	std	Y+4, r25	; 0x04
     39a:	2d 83       	std	Y+5, r18	; 0x05
     39c:	3e 83       	std	Y+6, r19	; 0x06
     39e:	4f 83       	std	Y+7, r20	; 0x07
     3a0:	58 87       	std	Y+8, r21	; 0x08
     3a2:	e9 e0       	ldi	r30, 0x09	; 9
     3a4:	ee 2e       	mov	r14, r30
     3a6:	f1 2c       	mov	r15, r1
     3a8:	ec 0e       	add	r14, r28
     3aa:	fd 1e       	adc	r15, r29
     3ac:	ce 01       	movw	r24, r28
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	b7 01       	movw	r22, r14
     3b2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     3b6:	8e 01       	movw	r16, r28
     3b8:	0f 5e       	subi	r16, 0xEF	; 239
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
     3bc:	ce 01       	movw	r24, r28
     3be:	05 96       	adiw	r24, 0x05	; 5
     3c0:	b8 01       	movw	r22, r16
     3c2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     3c6:	8a 89       	ldd	r24, Y+18	; 0x12
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	89 27       	eor	r24, r25
     3cc:	8a 8b       	std	Y+18, r24	; 0x12
     3ce:	c7 01       	movw	r24, r14
     3d0:	b8 01       	movw	r22, r16
     3d2:	ae 01       	movw	r20, r28
     3d4:	47 5e       	subi	r20, 0xE7	; 231
     3d6:	5f 4f       	sbci	r21, 0xFF	; 255
     3d8:	0e 94 77 00 	call	0xee	; 0xee <_fpadd_parts>
     3dc:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__pack_f>
     3e0:	a0 96       	adiw	r28, 0x20	; 32
     3e2:	e6 e0       	ldi	r30, 0x06	; 6
     3e4:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__epilogue_restores__+0x18>

000003e8 <__addsf3>:
     3e8:	a0 e2       	ldi	r26, 0x20	; 32
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	ea ef       	ldi	r30, 0xFA	; 250
     3ee:	f1 e0       	ldi	r31, 0x01	; 1
     3f0:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__prologue_saves__+0x18>
     3f4:	69 83       	std	Y+1, r22	; 0x01
     3f6:	7a 83       	std	Y+2, r23	; 0x02
     3f8:	8b 83       	std	Y+3, r24	; 0x03
     3fa:	9c 83       	std	Y+4, r25	; 0x04
     3fc:	2d 83       	std	Y+5, r18	; 0x05
     3fe:	3e 83       	std	Y+6, r19	; 0x06
     400:	4f 83       	std	Y+7, r20	; 0x07
     402:	58 87       	std	Y+8, r21	; 0x08
     404:	f9 e0       	ldi	r31, 0x09	; 9
     406:	ef 2e       	mov	r14, r31
     408:	f1 2c       	mov	r15, r1
     40a:	ec 0e       	add	r14, r28
     40c:	fd 1e       	adc	r15, r29
     40e:	ce 01       	movw	r24, r28
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	b7 01       	movw	r22, r14
     414:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     418:	8e 01       	movw	r16, r28
     41a:	0f 5e       	subi	r16, 0xEF	; 239
     41c:	1f 4f       	sbci	r17, 0xFF	; 255
     41e:	ce 01       	movw	r24, r28
     420:	05 96       	adiw	r24, 0x05	; 5
     422:	b8 01       	movw	r22, r16
     424:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     428:	c7 01       	movw	r24, r14
     42a:	b8 01       	movw	r22, r16
     42c:	ae 01       	movw	r20, r28
     42e:	47 5e       	subi	r20, 0xE7	; 231
     430:	5f 4f       	sbci	r21, 0xFF	; 255
     432:	0e 94 77 00 	call	0xee	; 0xee <_fpadd_parts>
     436:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__pack_f>
     43a:	a0 96       	adiw	r28, 0x20	; 32
     43c:	e6 e0       	ldi	r30, 0x06	; 6
     43e:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__epilogue_restores__+0x18>

00000442 <__mulsf3>:
     442:	a0 e2       	ldi	r26, 0x20	; 32
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e7 e2       	ldi	r30, 0x27	; 39
     448:	f2 e0       	ldi	r31, 0x02	; 2
     44a:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__prologue_saves__>
     44e:	69 83       	std	Y+1, r22	; 0x01
     450:	7a 83       	std	Y+2, r23	; 0x02
     452:	8b 83       	std	Y+3, r24	; 0x03
     454:	9c 83       	std	Y+4, r25	; 0x04
     456:	2d 83       	std	Y+5, r18	; 0x05
     458:	3e 83       	std	Y+6, r19	; 0x06
     45a:	4f 83       	std	Y+7, r20	; 0x07
     45c:	58 87       	std	Y+8, r21	; 0x08
     45e:	ce 01       	movw	r24, r28
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	be 01       	movw	r22, r28
     464:	67 5f       	subi	r22, 0xF7	; 247
     466:	7f 4f       	sbci	r23, 0xFF	; 255
     468:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     46c:	ce 01       	movw	r24, r28
     46e:	05 96       	adiw	r24, 0x05	; 5
     470:	be 01       	movw	r22, r28
     472:	6f 5e       	subi	r22, 0xEF	; 239
     474:	7f 4f       	sbci	r23, 0xFF	; 255
     476:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     47a:	99 85       	ldd	r25, Y+9	; 0x09
     47c:	92 30       	cpi	r25, 0x02	; 2
     47e:	88 f0       	brcs	.+34     	; 0x4a2 <__mulsf3+0x60>
     480:	89 89       	ldd	r24, Y+17	; 0x11
     482:	82 30       	cpi	r24, 0x02	; 2
     484:	c8 f0       	brcs	.+50     	; 0x4b8 <__mulsf3+0x76>
     486:	94 30       	cpi	r25, 0x04	; 4
     488:	19 f4       	brne	.+6      	; 0x490 <__mulsf3+0x4e>
     48a:	82 30       	cpi	r24, 0x02	; 2
     48c:	51 f4       	brne	.+20     	; 0x4a2 <__mulsf3+0x60>
     48e:	04 c0       	rjmp	.+8      	; 0x498 <__mulsf3+0x56>
     490:	84 30       	cpi	r24, 0x04	; 4
     492:	29 f4       	brne	.+10     	; 0x49e <__mulsf3+0x5c>
     494:	92 30       	cpi	r25, 0x02	; 2
     496:	81 f4       	brne	.+32     	; 0x4b8 <__mulsf3+0x76>
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	c6 c0       	rjmp	.+396    	; 0x62a <__mulsf3+0x1e8>
     49e:	92 30       	cpi	r25, 0x02	; 2
     4a0:	49 f4       	brne	.+18     	; 0x4b4 <__mulsf3+0x72>
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a6:	8a 89       	ldd	r24, Y+18	; 0x12
     4a8:	98 13       	cpse	r25, r24
     4aa:	21 e0       	ldi	r18, 0x01	; 1
     4ac:	2a 87       	std	Y+10, r18	; 0x0a
     4ae:	ce 01       	movw	r24, r28
     4b0:	09 96       	adiw	r24, 0x09	; 9
     4b2:	bb c0       	rjmp	.+374    	; 0x62a <__mulsf3+0x1e8>
     4b4:	82 30       	cpi	r24, 0x02	; 2
     4b6:	49 f4       	brne	.+18     	; 0x4ca <__mulsf3+0x88>
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	98 13       	cpse	r25, r24
     4c0:	21 e0       	ldi	r18, 0x01	; 1
     4c2:	2a 8b       	std	Y+18, r18	; 0x12
     4c4:	ce 01       	movw	r24, r28
     4c6:	41 96       	adiw	r24, 0x11	; 17
     4c8:	b0 c0       	rjmp	.+352    	; 0x62a <__mulsf3+0x1e8>
     4ca:	2d 84       	ldd	r2, Y+13	; 0x0d
     4cc:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ce:	4f 84       	ldd	r4, Y+15	; 0x0f
     4d0:	58 88       	ldd	r5, Y+16	; 0x10
     4d2:	6d 88       	ldd	r6, Y+21	; 0x15
     4d4:	7e 88       	ldd	r7, Y+22	; 0x16
     4d6:	8f 88       	ldd	r8, Y+23	; 0x17
     4d8:	98 8c       	ldd	r9, Y+24	; 0x18
     4da:	ee 24       	eor	r14, r14
     4dc:	ff 24       	eor	r15, r15
     4de:	87 01       	movw	r16, r14
     4e0:	aa 24       	eor	r10, r10
     4e2:	bb 24       	eor	r11, r11
     4e4:	65 01       	movw	r12, r10
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	e0 e0       	ldi	r30, 0x00	; 0
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	c1 01       	movw	r24, r2
     4f4:	81 70       	andi	r24, 0x01	; 1
     4f6:	90 70       	andi	r25, 0x00	; 0
     4f8:	89 2b       	or	r24, r25
     4fa:	e9 f0       	breq	.+58     	; 0x536 <__mulsf3+0xf4>
     4fc:	e6 0c       	add	r14, r6
     4fe:	f7 1c       	adc	r15, r7
     500:	08 1d       	adc	r16, r8
     502:	19 1d       	adc	r17, r9
     504:	9a 01       	movw	r18, r20
     506:	ab 01       	movw	r20, r22
     508:	2a 0d       	add	r18, r10
     50a:	3b 1d       	adc	r19, r11
     50c:	4c 1d       	adc	r20, r12
     50e:	5d 1d       	adc	r21, r13
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	a0 e0       	ldi	r26, 0x00	; 0
     516:	b0 e0       	ldi	r27, 0x00	; 0
     518:	e6 14       	cp	r14, r6
     51a:	f7 04       	cpc	r15, r7
     51c:	08 05       	cpc	r16, r8
     51e:	19 05       	cpc	r17, r9
     520:	20 f4       	brcc	.+8      	; 0x52a <__mulsf3+0xe8>
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	a0 e0       	ldi	r26, 0x00	; 0
     528:	b0 e0       	ldi	r27, 0x00	; 0
     52a:	ba 01       	movw	r22, r20
     52c:	a9 01       	movw	r20, r18
     52e:	48 0f       	add	r20, r24
     530:	59 1f       	adc	r21, r25
     532:	6a 1f       	adc	r22, r26
     534:	7b 1f       	adc	r23, r27
     536:	aa 0c       	add	r10, r10
     538:	bb 1c       	adc	r11, r11
     53a:	cc 1c       	adc	r12, r12
     53c:	dd 1c       	adc	r13, r13
     53e:	97 fe       	sbrs	r9, 7
     540:	08 c0       	rjmp	.+16     	; 0x552 <__mulsf3+0x110>
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	a0 e0       	ldi	r26, 0x00	; 0
     548:	b0 e0       	ldi	r27, 0x00	; 0
     54a:	a8 2a       	or	r10, r24
     54c:	b9 2a       	or	r11, r25
     54e:	ca 2a       	or	r12, r26
     550:	db 2a       	or	r13, r27
     552:	31 96       	adiw	r30, 0x01	; 1
     554:	e0 32       	cpi	r30, 0x20	; 32
     556:	f1 05       	cpc	r31, r1
     558:	49 f0       	breq	.+18     	; 0x56c <__mulsf3+0x12a>
     55a:	66 0c       	add	r6, r6
     55c:	77 1c       	adc	r7, r7
     55e:	88 1c       	adc	r8, r8
     560:	99 1c       	adc	r9, r9
     562:	56 94       	lsr	r5
     564:	47 94       	ror	r4
     566:	37 94       	ror	r3
     568:	27 94       	ror	r2
     56a:	c3 cf       	rjmp	.-122    	; 0x4f2 <__mulsf3+0xb0>
     56c:	fa 85       	ldd	r31, Y+10	; 0x0a
     56e:	ea 89       	ldd	r30, Y+18	; 0x12
     570:	2b 89       	ldd	r18, Y+19	; 0x13
     572:	3c 89       	ldd	r19, Y+20	; 0x14
     574:	8b 85       	ldd	r24, Y+11	; 0x0b
     576:	9c 85       	ldd	r25, Y+12	; 0x0c
     578:	28 0f       	add	r18, r24
     57a:	39 1f       	adc	r19, r25
     57c:	2e 5f       	subi	r18, 0xFE	; 254
     57e:	3f 4f       	sbci	r19, 0xFF	; 255
     580:	17 c0       	rjmp	.+46     	; 0x5b0 <__mulsf3+0x16e>
     582:	ca 01       	movw	r24, r20
     584:	81 70       	andi	r24, 0x01	; 1
     586:	90 70       	andi	r25, 0x00	; 0
     588:	89 2b       	or	r24, r25
     58a:	61 f0       	breq	.+24     	; 0x5a4 <__mulsf3+0x162>
     58c:	16 95       	lsr	r17
     58e:	07 95       	ror	r16
     590:	f7 94       	ror	r15
     592:	e7 94       	ror	r14
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	a0 e0       	ldi	r26, 0x00	; 0
     59a:	b0 e8       	ldi	r27, 0x80	; 128
     59c:	e8 2a       	or	r14, r24
     59e:	f9 2a       	or	r15, r25
     5a0:	0a 2b       	or	r16, r26
     5a2:	1b 2b       	or	r17, r27
     5a4:	76 95       	lsr	r23
     5a6:	67 95       	ror	r22
     5a8:	57 95       	ror	r21
     5aa:	47 95       	ror	r20
     5ac:	2f 5f       	subi	r18, 0xFF	; 255
     5ae:	3f 4f       	sbci	r19, 0xFF	; 255
     5b0:	77 fd       	sbrc	r23, 7
     5b2:	e7 cf       	rjmp	.-50     	; 0x582 <__mulsf3+0x140>
     5b4:	0c c0       	rjmp	.+24     	; 0x5ce <__mulsf3+0x18c>
     5b6:	44 0f       	add	r20, r20
     5b8:	55 1f       	adc	r21, r21
     5ba:	66 1f       	adc	r22, r22
     5bc:	77 1f       	adc	r23, r23
     5be:	17 fd       	sbrc	r17, 7
     5c0:	41 60       	ori	r20, 0x01	; 1
     5c2:	ee 0c       	add	r14, r14
     5c4:	ff 1c       	adc	r15, r15
     5c6:	00 1f       	adc	r16, r16
     5c8:	11 1f       	adc	r17, r17
     5ca:	21 50       	subi	r18, 0x01	; 1
     5cc:	30 40       	sbci	r19, 0x00	; 0
     5ce:	40 30       	cpi	r20, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	59 07       	cpc	r21, r25
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	69 07       	cpc	r22, r25
     5d8:	90 e4       	ldi	r25, 0x40	; 64
     5da:	79 07       	cpc	r23, r25
     5dc:	60 f3       	brcs	.-40     	; 0x5b6 <__mulsf3+0x174>
     5de:	2b 8f       	std	Y+27, r18	; 0x1b
     5e0:	3c 8f       	std	Y+28, r19	; 0x1c
     5e2:	db 01       	movw	r26, r22
     5e4:	ca 01       	movw	r24, r20
     5e6:	8f 77       	andi	r24, 0x7F	; 127
     5e8:	90 70       	andi	r25, 0x00	; 0
     5ea:	a0 70       	andi	r26, 0x00	; 0
     5ec:	b0 70       	andi	r27, 0x00	; 0
     5ee:	80 34       	cpi	r24, 0x40	; 64
     5f0:	91 05       	cpc	r25, r1
     5f2:	a1 05       	cpc	r26, r1
     5f4:	b1 05       	cpc	r27, r1
     5f6:	61 f4       	brne	.+24     	; 0x610 <__mulsf3+0x1ce>
     5f8:	47 fd       	sbrc	r20, 7
     5fa:	0a c0       	rjmp	.+20     	; 0x610 <__mulsf3+0x1ce>
     5fc:	e1 14       	cp	r14, r1
     5fe:	f1 04       	cpc	r15, r1
     600:	01 05       	cpc	r16, r1
     602:	11 05       	cpc	r17, r1
     604:	29 f0       	breq	.+10     	; 0x610 <__mulsf3+0x1ce>
     606:	40 5c       	subi	r20, 0xC0	; 192
     608:	5f 4f       	sbci	r21, 0xFF	; 255
     60a:	6f 4f       	sbci	r22, 0xFF	; 255
     60c:	7f 4f       	sbci	r23, 0xFF	; 255
     60e:	40 78       	andi	r20, 0x80	; 128
     610:	1a 8e       	std	Y+26, r1	; 0x1a
     612:	fe 17       	cp	r31, r30
     614:	11 f0       	breq	.+4      	; 0x61a <__mulsf3+0x1d8>
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	8a 8f       	std	Y+26, r24	; 0x1a
     61a:	4d 8f       	std	Y+29, r20	; 0x1d
     61c:	5e 8f       	std	Y+30, r21	; 0x1e
     61e:	6f 8f       	std	Y+31, r22	; 0x1f
     620:	78 a3       	std	Y+32, r23	; 0x20
     622:	83 e0       	ldi	r24, 0x03	; 3
     624:	89 8f       	std	Y+25, r24	; 0x19
     626:	ce 01       	movw	r24, r28
     628:	49 96       	adiw	r24, 0x19	; 25
     62a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__pack_f>
     62e:	a0 96       	adiw	r28, 0x20	; 32
     630:	e2 e1       	ldi	r30, 0x12	; 18
     632:	0c 94 41 0d 	jmp	0x1a82	; 0x1a82 <__epilogue_restores__>

00000636 <__gtsf2>:
     636:	a8 e1       	ldi	r26, 0x18	; 24
     638:	b0 e0       	ldi	r27, 0x00	; 0
     63a:	e1 e2       	ldi	r30, 0x21	; 33
     63c:	f3 e0       	ldi	r31, 0x03	; 3
     63e:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__prologue_saves__+0x18>
     642:	69 83       	std	Y+1, r22	; 0x01
     644:	7a 83       	std	Y+2, r23	; 0x02
     646:	8b 83       	std	Y+3, r24	; 0x03
     648:	9c 83       	std	Y+4, r25	; 0x04
     64a:	2d 83       	std	Y+5, r18	; 0x05
     64c:	3e 83       	std	Y+6, r19	; 0x06
     64e:	4f 83       	std	Y+7, r20	; 0x07
     650:	58 87       	std	Y+8, r21	; 0x08
     652:	89 e0       	ldi	r24, 0x09	; 9
     654:	e8 2e       	mov	r14, r24
     656:	f1 2c       	mov	r15, r1
     658:	ec 0e       	add	r14, r28
     65a:	fd 1e       	adc	r15, r29
     65c:	ce 01       	movw	r24, r28
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	b7 01       	movw	r22, r14
     662:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     666:	8e 01       	movw	r16, r28
     668:	0f 5e       	subi	r16, 0xEF	; 239
     66a:	1f 4f       	sbci	r17, 0xFF	; 255
     66c:	ce 01       	movw	r24, r28
     66e:	05 96       	adiw	r24, 0x05	; 5
     670:	b8 01       	movw	r22, r16
     672:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     676:	89 85       	ldd	r24, Y+9	; 0x09
     678:	82 30       	cpi	r24, 0x02	; 2
     67a:	40 f0       	brcs	.+16     	; 0x68c <__gtsf2+0x56>
     67c:	89 89       	ldd	r24, Y+17	; 0x11
     67e:	82 30       	cpi	r24, 0x02	; 2
     680:	28 f0       	brcs	.+10     	; 0x68c <__gtsf2+0x56>
     682:	c7 01       	movw	r24, r14
     684:	b8 01       	movw	r22, r16
     686:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fpcmp_parts_f>
     68a:	01 c0       	rjmp	.+2      	; 0x68e <__gtsf2+0x58>
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	68 96       	adiw	r28, 0x18	; 24
     690:	e6 e0       	ldi	r30, 0x06	; 6
     692:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__epilogue_restores__+0x18>

00000696 <__gesf2>:
     696:	a8 e1       	ldi	r26, 0x18	; 24
     698:	b0 e0       	ldi	r27, 0x00	; 0
     69a:	e1 e5       	ldi	r30, 0x51	; 81
     69c:	f3 e0       	ldi	r31, 0x03	; 3
     69e:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__prologue_saves__+0x18>
     6a2:	69 83       	std	Y+1, r22	; 0x01
     6a4:	7a 83       	std	Y+2, r23	; 0x02
     6a6:	8b 83       	std	Y+3, r24	; 0x03
     6a8:	9c 83       	std	Y+4, r25	; 0x04
     6aa:	2d 83       	std	Y+5, r18	; 0x05
     6ac:	3e 83       	std	Y+6, r19	; 0x06
     6ae:	4f 83       	std	Y+7, r20	; 0x07
     6b0:	58 87       	std	Y+8, r21	; 0x08
     6b2:	89 e0       	ldi	r24, 0x09	; 9
     6b4:	e8 2e       	mov	r14, r24
     6b6:	f1 2c       	mov	r15, r1
     6b8:	ec 0e       	add	r14, r28
     6ba:	fd 1e       	adc	r15, r29
     6bc:	ce 01       	movw	r24, r28
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	b7 01       	movw	r22, r14
     6c2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     6c6:	8e 01       	movw	r16, r28
     6c8:	0f 5e       	subi	r16, 0xEF	; 239
     6ca:	1f 4f       	sbci	r17, 0xFF	; 255
     6cc:	ce 01       	movw	r24, r28
     6ce:	05 96       	adiw	r24, 0x05	; 5
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     6d6:	89 85       	ldd	r24, Y+9	; 0x09
     6d8:	82 30       	cpi	r24, 0x02	; 2
     6da:	40 f0       	brcs	.+16     	; 0x6ec <__gesf2+0x56>
     6dc:	89 89       	ldd	r24, Y+17	; 0x11
     6de:	82 30       	cpi	r24, 0x02	; 2
     6e0:	28 f0       	brcs	.+10     	; 0x6ec <__gesf2+0x56>
     6e2:	c7 01       	movw	r24, r14
     6e4:	b8 01       	movw	r22, r16
     6e6:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fpcmp_parts_f>
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <__gesf2+0x58>
     6ec:	8f ef       	ldi	r24, 0xFF	; 255
     6ee:	68 96       	adiw	r28, 0x18	; 24
     6f0:	e6 e0       	ldi	r30, 0x06	; 6
     6f2:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__epilogue_restores__+0x18>

000006f6 <__ltsf2>:
     6f6:	a8 e1       	ldi	r26, 0x18	; 24
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	e1 e8       	ldi	r30, 0x81	; 129
     6fc:	f3 e0       	ldi	r31, 0x03	; 3
     6fe:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__prologue_saves__+0x18>
     702:	69 83       	std	Y+1, r22	; 0x01
     704:	7a 83       	std	Y+2, r23	; 0x02
     706:	8b 83       	std	Y+3, r24	; 0x03
     708:	9c 83       	std	Y+4, r25	; 0x04
     70a:	2d 83       	std	Y+5, r18	; 0x05
     70c:	3e 83       	std	Y+6, r19	; 0x06
     70e:	4f 83       	std	Y+7, r20	; 0x07
     710:	58 87       	std	Y+8, r21	; 0x08
     712:	89 e0       	ldi	r24, 0x09	; 9
     714:	e8 2e       	mov	r14, r24
     716:	f1 2c       	mov	r15, r1
     718:	ec 0e       	add	r14, r28
     71a:	fd 1e       	adc	r15, r29
     71c:	ce 01       	movw	r24, r28
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	b7 01       	movw	r22, r14
     722:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     726:	8e 01       	movw	r16, r28
     728:	0f 5e       	subi	r16, 0xEF	; 239
     72a:	1f 4f       	sbci	r17, 0xFF	; 255
     72c:	ce 01       	movw	r24, r28
     72e:	05 96       	adiw	r24, 0x05	; 5
     730:	b8 01       	movw	r22, r16
     732:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     736:	89 85       	ldd	r24, Y+9	; 0x09
     738:	82 30       	cpi	r24, 0x02	; 2
     73a:	40 f0       	brcs	.+16     	; 0x74c <__ltsf2+0x56>
     73c:	89 89       	ldd	r24, Y+17	; 0x11
     73e:	82 30       	cpi	r24, 0x02	; 2
     740:	28 f0       	brcs	.+10     	; 0x74c <__ltsf2+0x56>
     742:	c7 01       	movw	r24, r14
     744:	b8 01       	movw	r22, r16
     746:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fpcmp_parts_f>
     74a:	01 c0       	rjmp	.+2      	; 0x74e <__ltsf2+0x58>
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	68 96       	adiw	r28, 0x18	; 24
     750:	e6 e0       	ldi	r30, 0x06	; 6
     752:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__epilogue_restores__+0x18>

00000756 <__fixsfsi>:
     756:	ac e0       	ldi	r26, 0x0C	; 12
     758:	b0 e0       	ldi	r27, 0x00	; 0
     75a:	e1 eb       	ldi	r30, 0xB1	; 177
     75c:	f3 e0       	ldi	r31, 0x03	; 3
     75e:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__prologue_saves__+0x20>
     762:	69 83       	std	Y+1, r22	; 0x01
     764:	7a 83       	std	Y+2, r23	; 0x02
     766:	8b 83       	std	Y+3, r24	; 0x03
     768:	9c 83       	std	Y+4, r25	; 0x04
     76a:	ce 01       	movw	r24, r28
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	be 01       	movw	r22, r28
     770:	6b 5f       	subi	r22, 0xFB	; 251
     772:	7f 4f       	sbci	r23, 0xFF	; 255
     774:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     778:	8d 81       	ldd	r24, Y+5	; 0x05
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	61 f1       	breq	.+88     	; 0x7d6 <__fixsfsi+0x80>
     77e:	82 30       	cpi	r24, 0x02	; 2
     780:	50 f1       	brcs	.+84     	; 0x7d6 <__fixsfsi+0x80>
     782:	84 30       	cpi	r24, 0x04	; 4
     784:	21 f4       	brne	.+8      	; 0x78e <__fixsfsi+0x38>
     786:	8e 81       	ldd	r24, Y+6	; 0x06
     788:	88 23       	and	r24, r24
     78a:	51 f1       	breq	.+84     	; 0x7e0 <__fixsfsi+0x8a>
     78c:	2e c0       	rjmp	.+92     	; 0x7ea <__fixsfsi+0x94>
     78e:	2f 81       	ldd	r18, Y+7	; 0x07
     790:	38 85       	ldd	r19, Y+8	; 0x08
     792:	37 fd       	sbrc	r19, 7
     794:	20 c0       	rjmp	.+64     	; 0x7d6 <__fixsfsi+0x80>
     796:	6e 81       	ldd	r22, Y+6	; 0x06
     798:	2f 31       	cpi	r18, 0x1F	; 31
     79a:	31 05       	cpc	r19, r1
     79c:	1c f0       	brlt	.+6      	; 0x7a4 <__fixsfsi+0x4e>
     79e:	66 23       	and	r22, r22
     7a0:	f9 f0       	breq	.+62     	; 0x7e0 <__fixsfsi+0x8a>
     7a2:	23 c0       	rjmp	.+70     	; 0x7ea <__fixsfsi+0x94>
     7a4:	8e e1       	ldi	r24, 0x1E	; 30
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	82 1b       	sub	r24, r18
     7aa:	93 0b       	sbc	r25, r19
     7ac:	29 85       	ldd	r18, Y+9	; 0x09
     7ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     7b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     7b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b4:	04 c0       	rjmp	.+8      	; 0x7be <__fixsfsi+0x68>
     7b6:	56 95       	lsr	r21
     7b8:	47 95       	ror	r20
     7ba:	37 95       	ror	r19
     7bc:	27 95       	ror	r18
     7be:	8a 95       	dec	r24
     7c0:	d2 f7       	brpl	.-12     	; 0x7b6 <__fixsfsi+0x60>
     7c2:	66 23       	and	r22, r22
     7c4:	b1 f0       	breq	.+44     	; 0x7f2 <__fixsfsi+0x9c>
     7c6:	50 95       	com	r21
     7c8:	40 95       	com	r20
     7ca:	30 95       	com	r19
     7cc:	21 95       	neg	r18
     7ce:	3f 4f       	sbci	r19, 0xFF	; 255
     7d0:	4f 4f       	sbci	r20, 0xFF	; 255
     7d2:	5f 4f       	sbci	r21, 0xFF	; 255
     7d4:	0e c0       	rjmp	.+28     	; 0x7f2 <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	09 c0       	rjmp	.+18     	; 0x7f2 <__fixsfsi+0x9c>
     7e0:	2f ef       	ldi	r18, 0xFF	; 255
     7e2:	3f ef       	ldi	r19, 0xFF	; 255
     7e4:	4f ef       	ldi	r20, 0xFF	; 255
     7e6:	5f e7       	ldi	r21, 0x7F	; 127
     7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <__fixsfsi+0x9c>
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	40 e0       	ldi	r20, 0x00	; 0
     7f0:	50 e8       	ldi	r21, 0x80	; 128
     7f2:	b9 01       	movw	r22, r18
     7f4:	ca 01       	movw	r24, r20
     7f6:	2c 96       	adiw	r28, 0x0c	; 12
     7f8:	e2 e0       	ldi	r30, 0x02	; 2
     7fa:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <__epilogue_restores__+0x20>

000007fe <__pack_f>:
     7fe:	df 92       	push	r13
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
     808:	fc 01       	movw	r30, r24
     80a:	e4 80       	ldd	r14, Z+4	; 0x04
     80c:	f5 80       	ldd	r15, Z+5	; 0x05
     80e:	06 81       	ldd	r16, Z+6	; 0x06
     810:	17 81       	ldd	r17, Z+7	; 0x07
     812:	d1 80       	ldd	r13, Z+1	; 0x01
     814:	80 81       	ld	r24, Z
     816:	82 30       	cpi	r24, 0x02	; 2
     818:	48 f4       	brcc	.+18     	; 0x82c <__pack_f+0x2e>
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	a0 e1       	ldi	r26, 0x10	; 16
     820:	b0 e0       	ldi	r27, 0x00	; 0
     822:	e8 2a       	or	r14, r24
     824:	f9 2a       	or	r15, r25
     826:	0a 2b       	or	r16, r26
     828:	1b 2b       	or	r17, r27
     82a:	a5 c0       	rjmp	.+330    	; 0x976 <__stack+0x77>
     82c:	84 30       	cpi	r24, 0x04	; 4
     82e:	09 f4       	brne	.+2      	; 0x832 <__pack_f+0x34>
     830:	9f c0       	rjmp	.+318    	; 0x970 <__stack+0x71>
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	21 f4       	brne	.+8      	; 0x83e <__pack_f+0x40>
     836:	ee 24       	eor	r14, r14
     838:	ff 24       	eor	r15, r15
     83a:	87 01       	movw	r16, r14
     83c:	05 c0       	rjmp	.+10     	; 0x848 <__pack_f+0x4a>
     83e:	e1 14       	cp	r14, r1
     840:	f1 04       	cpc	r15, r1
     842:	01 05       	cpc	r16, r1
     844:	11 05       	cpc	r17, r1
     846:	19 f4       	brne	.+6      	; 0x84e <__pack_f+0x50>
     848:	e0 e0       	ldi	r30, 0x00	; 0
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	96 c0       	rjmp	.+300    	; 0x97a <__stack+0x7b>
     84e:	62 81       	ldd	r22, Z+2	; 0x02
     850:	73 81       	ldd	r23, Z+3	; 0x03
     852:	9f ef       	ldi	r25, 0xFF	; 255
     854:	62 38       	cpi	r22, 0x82	; 130
     856:	79 07       	cpc	r23, r25
     858:	0c f0       	brlt	.+2      	; 0x85c <__pack_f+0x5e>
     85a:	5b c0       	rjmp	.+182    	; 0x912 <__stack+0x13>
     85c:	22 e8       	ldi	r18, 0x82	; 130
     85e:	3f ef       	ldi	r19, 0xFF	; 255
     860:	26 1b       	sub	r18, r22
     862:	37 0b       	sbc	r19, r23
     864:	2a 31       	cpi	r18, 0x1A	; 26
     866:	31 05       	cpc	r19, r1
     868:	2c f0       	brlt	.+10     	; 0x874 <__pack_f+0x76>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	2a c0       	rjmp	.+84     	; 0x8c8 <__pack_f+0xca>
     874:	b8 01       	movw	r22, r16
     876:	a7 01       	movw	r20, r14
     878:	02 2e       	mov	r0, r18
     87a:	04 c0       	rjmp	.+8      	; 0x884 <__pack_f+0x86>
     87c:	76 95       	lsr	r23
     87e:	67 95       	ror	r22
     880:	57 95       	ror	r21
     882:	47 95       	ror	r20
     884:	0a 94       	dec	r0
     886:	d2 f7       	brpl	.-12     	; 0x87c <__pack_f+0x7e>
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	a0 e0       	ldi	r26, 0x00	; 0
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	04 c0       	rjmp	.+8      	; 0x89a <__pack_f+0x9c>
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	aa 1f       	adc	r26, r26
     898:	bb 1f       	adc	r27, r27
     89a:	2a 95       	dec	r18
     89c:	d2 f7       	brpl	.-12     	; 0x892 <__pack_f+0x94>
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	a1 09       	sbc	r26, r1
     8a2:	b1 09       	sbc	r27, r1
     8a4:	8e 21       	and	r24, r14
     8a6:	9f 21       	and	r25, r15
     8a8:	a0 23       	and	r26, r16
     8aa:	b1 23       	and	r27, r17
     8ac:	00 97       	sbiw	r24, 0x00	; 0
     8ae:	a1 05       	cpc	r26, r1
     8b0:	b1 05       	cpc	r27, r1
     8b2:	21 f0       	breq	.+8      	; 0x8bc <__pack_f+0xbe>
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	a0 e0       	ldi	r26, 0x00	; 0
     8ba:	b0 e0       	ldi	r27, 0x00	; 0
     8bc:	9a 01       	movw	r18, r20
     8be:	ab 01       	movw	r20, r22
     8c0:	28 2b       	or	r18, r24
     8c2:	39 2b       	or	r19, r25
     8c4:	4a 2b       	or	r20, r26
     8c6:	5b 2b       	or	r21, r27
     8c8:	da 01       	movw	r26, r20
     8ca:	c9 01       	movw	r24, r18
     8cc:	8f 77       	andi	r24, 0x7F	; 127
     8ce:	90 70       	andi	r25, 0x00	; 0
     8d0:	a0 70       	andi	r26, 0x00	; 0
     8d2:	b0 70       	andi	r27, 0x00	; 0
     8d4:	80 34       	cpi	r24, 0x40	; 64
     8d6:	91 05       	cpc	r25, r1
     8d8:	a1 05       	cpc	r26, r1
     8da:	b1 05       	cpc	r27, r1
     8dc:	39 f4       	brne	.+14     	; 0x8ec <__pack_f+0xee>
     8de:	27 ff       	sbrs	r18, 7
     8e0:	09 c0       	rjmp	.+18     	; 0x8f4 <__pack_f+0xf6>
     8e2:	20 5c       	subi	r18, 0xC0	; 192
     8e4:	3f 4f       	sbci	r19, 0xFF	; 255
     8e6:	4f 4f       	sbci	r20, 0xFF	; 255
     8e8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <__pack_f+0xf6>
     8ec:	21 5c       	subi	r18, 0xC1	; 193
     8ee:	3f 4f       	sbci	r19, 0xFF	; 255
     8f0:	4f 4f       	sbci	r20, 0xFF	; 255
     8f2:	5f 4f       	sbci	r21, 0xFF	; 255
     8f4:	e0 e0       	ldi	r30, 0x00	; 0
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	20 30       	cpi	r18, 0x00	; 0
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	3a 07       	cpc	r19, r26
     8fe:	a0 e0       	ldi	r26, 0x00	; 0
     900:	4a 07       	cpc	r20, r26
     902:	a0 e4       	ldi	r26, 0x40	; 64
     904:	5a 07       	cpc	r21, r26
     906:	10 f0       	brcs	.+4      	; 0x90c <__stack+0xd>
     908:	e1 e0       	ldi	r30, 0x01	; 1
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	79 01       	movw	r14, r18
     90e:	8a 01       	movw	r16, r20
     910:	27 c0       	rjmp	.+78     	; 0x960 <__stack+0x61>
     912:	60 38       	cpi	r22, 0x80	; 128
     914:	71 05       	cpc	r23, r1
     916:	64 f5       	brge	.+88     	; 0x970 <__stack+0x71>
     918:	fb 01       	movw	r30, r22
     91a:	e1 58       	subi	r30, 0x81	; 129
     91c:	ff 4f       	sbci	r31, 0xFF	; 255
     91e:	d8 01       	movw	r26, r16
     920:	c7 01       	movw	r24, r14
     922:	8f 77       	andi	r24, 0x7F	; 127
     924:	90 70       	andi	r25, 0x00	; 0
     926:	a0 70       	andi	r26, 0x00	; 0
     928:	b0 70       	andi	r27, 0x00	; 0
     92a:	80 34       	cpi	r24, 0x40	; 64
     92c:	91 05       	cpc	r25, r1
     92e:	a1 05       	cpc	r26, r1
     930:	b1 05       	cpc	r27, r1
     932:	39 f4       	brne	.+14     	; 0x942 <__stack+0x43>
     934:	e7 fe       	sbrs	r14, 7
     936:	0d c0       	rjmp	.+26     	; 0x952 <__stack+0x53>
     938:	80 e4       	ldi	r24, 0x40	; 64
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	04 c0       	rjmp	.+8      	; 0x94a <__stack+0x4b>
     942:	8f e3       	ldi	r24, 0x3F	; 63
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	a0 e0       	ldi	r26, 0x00	; 0
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	e8 0e       	add	r14, r24
     94c:	f9 1e       	adc	r15, r25
     94e:	0a 1f       	adc	r16, r26
     950:	1b 1f       	adc	r17, r27
     952:	17 ff       	sbrs	r17, 7
     954:	05 c0       	rjmp	.+10     	; 0x960 <__stack+0x61>
     956:	16 95       	lsr	r17
     958:	07 95       	ror	r16
     95a:	f7 94       	ror	r15
     95c:	e7 94       	ror	r14
     95e:	31 96       	adiw	r30, 0x01	; 1
     960:	87 e0       	ldi	r24, 0x07	; 7
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d1 f7       	brne	.-12     	; 0x962 <__stack+0x63>
     96e:	05 c0       	rjmp	.+10     	; 0x97a <__stack+0x7b>
     970:	ee 24       	eor	r14, r14
     972:	ff 24       	eor	r15, r15
     974:	87 01       	movw	r16, r14
     976:	ef ef       	ldi	r30, 0xFF	; 255
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	6e 2f       	mov	r22, r30
     97c:	67 95       	ror	r22
     97e:	66 27       	eor	r22, r22
     980:	67 95       	ror	r22
     982:	90 2f       	mov	r25, r16
     984:	9f 77       	andi	r25, 0x7F	; 127
     986:	d7 94       	ror	r13
     988:	dd 24       	eor	r13, r13
     98a:	d7 94       	ror	r13
     98c:	8e 2f       	mov	r24, r30
     98e:	86 95       	lsr	r24
     990:	49 2f       	mov	r20, r25
     992:	46 2b       	or	r20, r22
     994:	58 2f       	mov	r21, r24
     996:	5d 29       	or	r21, r13
     998:	b7 01       	movw	r22, r14
     99a:	ca 01       	movw	r24, r20
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	ff 90       	pop	r15
     9a2:	ef 90       	pop	r14
     9a4:	df 90       	pop	r13
     9a6:	08 95       	ret

000009a8 <__unpack_f>:
     9a8:	fc 01       	movw	r30, r24
     9aa:	db 01       	movw	r26, r22
     9ac:	40 81       	ld	r20, Z
     9ae:	51 81       	ldd	r21, Z+1	; 0x01
     9b0:	22 81       	ldd	r18, Z+2	; 0x02
     9b2:	62 2f       	mov	r22, r18
     9b4:	6f 77       	andi	r22, 0x7F	; 127
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	22 1f       	adc	r18, r18
     9ba:	22 27       	eor	r18, r18
     9bc:	22 1f       	adc	r18, r18
     9be:	93 81       	ldd	r25, Z+3	; 0x03
     9c0:	89 2f       	mov	r24, r25
     9c2:	88 0f       	add	r24, r24
     9c4:	82 2b       	or	r24, r18
     9c6:	28 2f       	mov	r18, r24
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	99 1f       	adc	r25, r25
     9cc:	99 27       	eor	r25, r25
     9ce:	99 1f       	adc	r25, r25
     9d0:	11 96       	adiw	r26, 0x01	; 1
     9d2:	9c 93       	st	X, r25
     9d4:	11 97       	sbiw	r26, 0x01	; 1
     9d6:	21 15       	cp	r18, r1
     9d8:	31 05       	cpc	r19, r1
     9da:	a9 f5       	brne	.+106    	; 0xa46 <__unpack_f+0x9e>
     9dc:	41 15       	cp	r20, r1
     9de:	51 05       	cpc	r21, r1
     9e0:	61 05       	cpc	r22, r1
     9e2:	71 05       	cpc	r23, r1
     9e4:	11 f4       	brne	.+4      	; 0x9ea <__unpack_f+0x42>
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	37 c0       	rjmp	.+110    	; 0xa58 <__unpack_f+0xb0>
     9ea:	82 e8       	ldi	r24, 0x82	; 130
     9ec:	9f ef       	ldi	r25, 0xFF	; 255
     9ee:	13 96       	adiw	r26, 0x03	; 3
     9f0:	9c 93       	st	X, r25
     9f2:	8e 93       	st	-X, r24
     9f4:	12 97       	sbiw	r26, 0x02	; 2
     9f6:	9a 01       	movw	r18, r20
     9f8:	ab 01       	movw	r20, r22
     9fa:	67 e0       	ldi	r22, 0x07	; 7
     9fc:	22 0f       	add	r18, r18
     9fe:	33 1f       	adc	r19, r19
     a00:	44 1f       	adc	r20, r20
     a02:	55 1f       	adc	r21, r21
     a04:	6a 95       	dec	r22
     a06:	d1 f7       	brne	.-12     	; 0x9fc <__unpack_f+0x54>
     a08:	83 e0       	ldi	r24, 0x03	; 3
     a0a:	8c 93       	st	X, r24
     a0c:	0d c0       	rjmp	.+26     	; 0xa28 <__unpack_f+0x80>
     a0e:	22 0f       	add	r18, r18
     a10:	33 1f       	adc	r19, r19
     a12:	44 1f       	adc	r20, r20
     a14:	55 1f       	adc	r21, r21
     a16:	12 96       	adiw	r26, 0x02	; 2
     a18:	8d 91       	ld	r24, X+
     a1a:	9c 91       	ld	r25, X
     a1c:	13 97       	sbiw	r26, 0x03	; 3
     a1e:	01 97       	sbiw	r24, 0x01	; 1
     a20:	13 96       	adiw	r26, 0x03	; 3
     a22:	9c 93       	st	X, r25
     a24:	8e 93       	st	-X, r24
     a26:	12 97       	sbiw	r26, 0x02	; 2
     a28:	20 30       	cpi	r18, 0x00	; 0
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	38 07       	cpc	r19, r24
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	48 07       	cpc	r20, r24
     a32:	80 e4       	ldi	r24, 0x40	; 64
     a34:	58 07       	cpc	r21, r24
     a36:	58 f3       	brcs	.-42     	; 0xa0e <__unpack_f+0x66>
     a38:	14 96       	adiw	r26, 0x04	; 4
     a3a:	2d 93       	st	X+, r18
     a3c:	3d 93       	st	X+, r19
     a3e:	4d 93       	st	X+, r20
     a40:	5c 93       	st	X, r21
     a42:	17 97       	sbiw	r26, 0x07	; 7
     a44:	08 95       	ret
     a46:	2f 3f       	cpi	r18, 0xFF	; 255
     a48:	31 05       	cpc	r19, r1
     a4a:	79 f4       	brne	.+30     	; 0xa6a <__unpack_f+0xc2>
     a4c:	41 15       	cp	r20, r1
     a4e:	51 05       	cpc	r21, r1
     a50:	61 05       	cpc	r22, r1
     a52:	71 05       	cpc	r23, r1
     a54:	19 f4       	brne	.+6      	; 0xa5c <__unpack_f+0xb4>
     a56:	84 e0       	ldi	r24, 0x04	; 4
     a58:	8c 93       	st	X, r24
     a5a:	08 95       	ret
     a5c:	64 ff       	sbrs	r22, 4
     a5e:	03 c0       	rjmp	.+6      	; 0xa66 <__unpack_f+0xbe>
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	8c 93       	st	X, r24
     a64:	12 c0       	rjmp	.+36     	; 0xa8a <__unpack_f+0xe2>
     a66:	1c 92       	st	X, r1
     a68:	10 c0       	rjmp	.+32     	; 0xa8a <__unpack_f+0xe2>
     a6a:	2f 57       	subi	r18, 0x7F	; 127
     a6c:	30 40       	sbci	r19, 0x00	; 0
     a6e:	13 96       	adiw	r26, 0x03	; 3
     a70:	3c 93       	st	X, r19
     a72:	2e 93       	st	-X, r18
     a74:	12 97       	sbiw	r26, 0x02	; 2
     a76:	83 e0       	ldi	r24, 0x03	; 3
     a78:	8c 93       	st	X, r24
     a7a:	87 e0       	ldi	r24, 0x07	; 7
     a7c:	44 0f       	add	r20, r20
     a7e:	55 1f       	adc	r21, r21
     a80:	66 1f       	adc	r22, r22
     a82:	77 1f       	adc	r23, r23
     a84:	8a 95       	dec	r24
     a86:	d1 f7       	brne	.-12     	; 0xa7c <__unpack_f+0xd4>
     a88:	70 64       	ori	r23, 0x40	; 64
     a8a:	14 96       	adiw	r26, 0x04	; 4
     a8c:	4d 93       	st	X+, r20
     a8e:	5d 93       	st	X+, r21
     a90:	6d 93       	st	X+, r22
     a92:	7c 93       	st	X, r23
     a94:	17 97       	sbiw	r26, 0x07	; 7
     a96:	08 95       	ret

00000a98 <__fpcmp_parts_f>:
     a98:	1f 93       	push	r17
     a9a:	dc 01       	movw	r26, r24
     a9c:	fb 01       	movw	r30, r22
     a9e:	9c 91       	ld	r25, X
     aa0:	92 30       	cpi	r25, 0x02	; 2
     aa2:	08 f4       	brcc	.+2      	; 0xaa6 <__fpcmp_parts_f+0xe>
     aa4:	47 c0       	rjmp	.+142    	; 0xb34 <__fpcmp_parts_f+0x9c>
     aa6:	80 81       	ld	r24, Z
     aa8:	82 30       	cpi	r24, 0x02	; 2
     aaa:	08 f4       	brcc	.+2      	; 0xaae <__fpcmp_parts_f+0x16>
     aac:	43 c0       	rjmp	.+134    	; 0xb34 <__fpcmp_parts_f+0x9c>
     aae:	94 30       	cpi	r25, 0x04	; 4
     ab0:	51 f4       	brne	.+20     	; 0xac6 <__fpcmp_parts_f+0x2e>
     ab2:	11 96       	adiw	r26, 0x01	; 1
     ab4:	1c 91       	ld	r17, X
     ab6:	84 30       	cpi	r24, 0x04	; 4
     ab8:	99 f5       	brne	.+102    	; 0xb20 <__fpcmp_parts_f+0x88>
     aba:	81 81       	ldd	r24, Z+1	; 0x01
     abc:	68 2f       	mov	r22, r24
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	61 1b       	sub	r22, r17
     ac2:	71 09       	sbc	r23, r1
     ac4:	3f c0       	rjmp	.+126    	; 0xb44 <__fpcmp_parts_f+0xac>
     ac6:	84 30       	cpi	r24, 0x04	; 4
     ac8:	21 f0       	breq	.+8      	; 0xad2 <__fpcmp_parts_f+0x3a>
     aca:	92 30       	cpi	r25, 0x02	; 2
     acc:	31 f4       	brne	.+12     	; 0xada <__fpcmp_parts_f+0x42>
     ace:	82 30       	cpi	r24, 0x02	; 2
     ad0:	b9 f1       	breq	.+110    	; 0xb40 <__fpcmp_parts_f+0xa8>
     ad2:	81 81       	ldd	r24, Z+1	; 0x01
     ad4:	88 23       	and	r24, r24
     ad6:	89 f1       	breq	.+98     	; 0xb3a <__fpcmp_parts_f+0xa2>
     ad8:	2d c0       	rjmp	.+90     	; 0xb34 <__fpcmp_parts_f+0x9c>
     ada:	11 96       	adiw	r26, 0x01	; 1
     adc:	1c 91       	ld	r17, X
     ade:	11 97       	sbiw	r26, 0x01	; 1
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	f1 f0       	breq	.+60     	; 0xb20 <__fpcmp_parts_f+0x88>
     ae4:	81 81       	ldd	r24, Z+1	; 0x01
     ae6:	18 17       	cp	r17, r24
     ae8:	d9 f4       	brne	.+54     	; 0xb20 <__fpcmp_parts_f+0x88>
     aea:	12 96       	adiw	r26, 0x02	; 2
     aec:	2d 91       	ld	r18, X+
     aee:	3c 91       	ld	r19, X
     af0:	13 97       	sbiw	r26, 0x03	; 3
     af2:	82 81       	ldd	r24, Z+2	; 0x02
     af4:	93 81       	ldd	r25, Z+3	; 0x03
     af6:	82 17       	cp	r24, r18
     af8:	93 07       	cpc	r25, r19
     afa:	94 f0       	brlt	.+36     	; 0xb20 <__fpcmp_parts_f+0x88>
     afc:	28 17       	cp	r18, r24
     afe:	39 07       	cpc	r19, r25
     b00:	bc f0       	brlt	.+46     	; 0xb30 <__fpcmp_parts_f+0x98>
     b02:	14 96       	adiw	r26, 0x04	; 4
     b04:	8d 91       	ld	r24, X+
     b06:	9d 91       	ld	r25, X+
     b08:	0d 90       	ld	r0, X+
     b0a:	bc 91       	ld	r27, X
     b0c:	a0 2d       	mov	r26, r0
     b0e:	24 81       	ldd	r18, Z+4	; 0x04
     b10:	35 81       	ldd	r19, Z+5	; 0x05
     b12:	46 81       	ldd	r20, Z+6	; 0x06
     b14:	57 81       	ldd	r21, Z+7	; 0x07
     b16:	28 17       	cp	r18, r24
     b18:	39 07       	cpc	r19, r25
     b1a:	4a 07       	cpc	r20, r26
     b1c:	5b 07       	cpc	r21, r27
     b1e:	18 f4       	brcc	.+6      	; 0xb26 <__fpcmp_parts_f+0x8e>
     b20:	11 23       	and	r17, r17
     b22:	41 f0       	breq	.+16     	; 0xb34 <__fpcmp_parts_f+0x9c>
     b24:	0a c0       	rjmp	.+20     	; 0xb3a <__fpcmp_parts_f+0xa2>
     b26:	82 17       	cp	r24, r18
     b28:	93 07       	cpc	r25, r19
     b2a:	a4 07       	cpc	r26, r20
     b2c:	b5 07       	cpc	r27, r21
     b2e:	40 f4       	brcc	.+16     	; 0xb40 <__fpcmp_parts_f+0xa8>
     b30:	11 23       	and	r17, r17
     b32:	19 f0       	breq	.+6      	; 0xb3a <__fpcmp_parts_f+0xa2>
     b34:	61 e0       	ldi	r22, 0x01	; 1
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	05 c0       	rjmp	.+10     	; 0xb44 <__fpcmp_parts_f+0xac>
     b3a:	6f ef       	ldi	r22, 0xFF	; 255
     b3c:	7f ef       	ldi	r23, 0xFF	; 255
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <__fpcmp_parts_f+0xac>
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	cb 01       	movw	r24, r22
     b46:	1f 91       	pop	r17
     b48:	08 95       	ret

00000b4a <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	2f 97       	sbiw	r28, 0x0f	; 15
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     b60:	83 e4       	ldi	r24, 0x43	; 67
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	40 e0       	ldi	r20, 0x00	; 0
     b66:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	/*set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     b6a:	83 e4       	ldi	r24, 0x43	; 67
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	/*Set Command to data port pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     b74:	84 e4       	ldi	r24, 0x44	; 68
     b76:	6f 85       	ldd	r22, Y+15	; 0x0f
     b78:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPortValue>
	/*Send Enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b7c:	83 e4       	ldi	r24, 0x43	; 67
     b7e:	62 e0       	ldi	r22, 0x02	; 2
     b80:	41 e0       	ldi	r20, 0x01	; 1
     b82:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	a0 e4       	ldi	r26, 0x40	; 64
     b8c:	b0 e4       	ldi	r27, 0x40	; 64
     b8e:	8b 87       	std	Y+11, r24	; 0x0b
     b90:	9c 87       	std	Y+12, r25	; 0x0c
     b92:	ad 87       	std	Y+13, r26	; 0x0d
     b94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b96:	6b 85       	ldd	r22, Y+11	; 0x0b
     b98:	7c 85       	ldd	r23, Y+12	; 0x0c
     b9a:	8d 85       	ldd	r24, Y+13	; 0x0d
     b9c:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	4a ef       	ldi	r20, 0xFA	; 250
     ba4:	54 e4       	ldi	r21, 0x44	; 68
     ba6:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     baa:	dc 01       	movw	r26, r24
     bac:	cb 01       	movw	r24, r22
     bae:	8f 83       	std	Y+7, r24	; 0x07
     bb0:	98 87       	std	Y+8, r25	; 0x08
     bb2:	a9 87       	std	Y+9, r26	; 0x09
     bb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb6:	6f 81       	ldd	r22, Y+7	; 0x07
     bb8:	78 85       	ldd	r23, Y+8	; 0x08
     bba:	89 85       	ldd	r24, Y+9	; 0x09
     bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	40 e8       	ldi	r20, 0x80	; 128
     bc4:	5f e3       	ldi	r21, 0x3F	; 63
     bc6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
     bca:	88 23       	and	r24, r24
     bcc:	2c f4       	brge	.+10     	; 0xbd8 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	9e 83       	std	Y+6, r25	; 0x06
     bd4:	8d 83       	std	Y+5, r24	; 0x05
     bd6:	3f c0       	rjmp	.+126    	; 0xc56 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bd8:	6f 81       	ldd	r22, Y+7	; 0x07
     bda:	78 85       	ldd	r23, Y+8	; 0x08
     bdc:	89 85       	ldd	r24, Y+9	; 0x09
     bde:	9a 85       	ldd	r25, Y+10	; 0x0a
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	3f ef       	ldi	r19, 0xFF	; 255
     be4:	4f e7       	ldi	r20, 0x7F	; 127
     be6:	57 e4       	ldi	r21, 0x47	; 71
     be8:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
     bec:	18 16       	cp	r1, r24
     bee:	4c f5       	brge	.+82     	; 0xc42 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf0:	6b 85       	ldd	r22, Y+11	; 0x0b
     bf2:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	40 e2       	ldi	r20, 0x20	; 32
     bfe:	51 e4       	ldi	r21, 0x41	; 65
     c00:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	bc 01       	movw	r22, r24
     c0a:	cd 01       	movw	r24, r26
     c0c:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	9e 83       	std	Y+6, r25	; 0x06
     c16:	8d 83       	std	Y+5, r24	; 0x05
     c18:	0f c0       	rjmp	.+30     	; 0xc38 <CLCD_voidSendCommand+0xee>
     c1a:	88 ec       	ldi	r24, 0xC8	; 200
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	9c 83       	std	Y+4, r25	; 0x04
     c20:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c22:	8b 81       	ldd	r24, Y+3	; 0x03
     c24:	9c 81       	ldd	r25, Y+4	; 0x04
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	f1 f7       	brne	.-4      	; 0xc26 <CLCD_voidSendCommand+0xdc>
     c2a:	9c 83       	std	Y+4, r25	; 0x04
     c2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2e:	8d 81       	ldd	r24, Y+5	; 0x05
     c30:	9e 81       	ldd	r25, Y+6	; 0x06
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	9e 83       	std	Y+6, r25	; 0x06
     c36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c38:	8d 81       	ldd	r24, Y+5	; 0x05
     c3a:	9e 81       	ldd	r25, Y+6	; 0x06
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	69 f7       	brne	.-38     	; 0xc1a <CLCD_voidSendCommand+0xd0>
     c40:	14 c0       	rjmp	.+40     	; 0xc6a <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c42:	6f 81       	ldd	r22, Y+7	; 0x07
     c44:	78 85       	ldd	r23, Y+8	; 0x08
     c46:	89 85       	ldd	r24, Y+9	; 0x09
     c48:	9a 85       	ldd	r25, Y+10	; 0x0a
     c4a:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	9e 83       	std	Y+6, r25	; 0x06
     c54:	8d 83       	std	Y+5, r24	; 0x05
     c56:	8d 81       	ldd	r24, Y+5	; 0x05
     c58:	9e 81       	ldd	r25, Y+6	; 0x06
     c5a:	9a 83       	std	Y+2, r25	; 0x02
     c5c:	89 83       	std	Y+1, r24	; 0x01
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	9a 81       	ldd	r25, Y+2	; 0x02
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <CLCD_voidSendCommand+0x118>
     c66:	9a 83       	std	Y+2, r25	; 0x02
     c68:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c6a:	83 e4       	ldi	r24, 0x43	; 67
     c6c:	62 e0       	ldi	r22, 0x02	; 2
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>

}
     c74:	2f 96       	adiw	r28, 0x0f	; 15
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	cd bf       	out	0x3d, r28	; 61
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	08 95       	ret

00000c86 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	2f 97       	sbiw	r28, 0x0f	; 15
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	f8 94       	cli
     c94:	de bf       	out	0x3e, r29	; 62
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	cd bf       	out	0x3d, r28	; 61
     c9a:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to HIGH for Data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     c9c:	83 e4       	ldi	r24, 0x43	; 67
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	41 e0       	ldi	r20, 0x01	; 1
     ca2:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	/*set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     ca6:	83 e4       	ldi	r24, 0x43	; 67
     ca8:	61 e0       	ldi	r22, 0x01	; 1
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	/*Send Data to data port pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     cb0:	84 e4       	ldi	r24, 0x44	; 68
     cb2:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb4:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPortValue>
	/*Send Enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     cb8:	83 e4       	ldi	r24, 0x43	; 67
     cba:	62 e0       	ldi	r22, 0x02	; 2
     cbc:	41 e0       	ldi	r20, 0x01	; 1
     cbe:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	a0 e4       	ldi	r26, 0x40	; 64
     cc8:	b0 e4       	ldi	r27, 0x40	; 64
     cca:	8b 87       	std	Y+11, r24	; 0x0b
     ccc:	9c 87       	std	Y+12, r25	; 0x0c
     cce:	ad 87       	std	Y+13, r26	; 0x0d
     cd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd2:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd4:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	4a ef       	ldi	r20, 0xFA	; 250
     ce0:	54 e4       	ldi	r21, 0x44	; 68
     ce2:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     ce6:	dc 01       	movw	r26, r24
     ce8:	cb 01       	movw	r24, r22
     cea:	8f 83       	std	Y+7, r24	; 0x07
     cec:	98 87       	std	Y+8, r25	; 0x08
     cee:	a9 87       	std	Y+9, r26	; 0x09
     cf0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cf2:	6f 81       	ldd	r22, Y+7	; 0x07
     cf4:	78 85       	ldd	r23, Y+8	; 0x08
     cf6:	89 85       	ldd	r24, Y+9	; 0x09
     cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	40 e8       	ldi	r20, 0x80	; 128
     d00:	5f e3       	ldi	r21, 0x3F	; 63
     d02:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
     d06:	88 23       	and	r24, r24
     d08:	2c f4       	brge	.+10     	; 0xd14 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	9e 83       	std	Y+6, r25	; 0x06
     d10:	8d 83       	std	Y+5, r24	; 0x05
     d12:	3f c0       	rjmp	.+126    	; 0xd92 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d14:	6f 81       	ldd	r22, Y+7	; 0x07
     d16:	78 85       	ldd	r23, Y+8	; 0x08
     d18:	89 85       	ldd	r24, Y+9	; 0x09
     d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	3f ef       	ldi	r19, 0xFF	; 255
     d20:	4f e7       	ldi	r20, 0x7F	; 127
     d22:	57 e4       	ldi	r21, 0x47	; 71
     d24:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
     d28:	18 16       	cp	r1, r24
     d2a:	4c f5       	brge	.+82     	; 0xd7e <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d30:	8d 85       	ldd	r24, Y+13	; 0x0d
     d32:	9e 85       	ldd	r25, Y+14	; 0x0e
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	40 e2       	ldi	r20, 0x20	; 32
     d3a:	51 e4       	ldi	r21, 0x41	; 65
     d3c:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	bc 01       	movw	r22, r24
     d46:	cd 01       	movw	r24, r26
     d48:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	9e 83       	std	Y+6, r25	; 0x06
     d52:	8d 83       	std	Y+5, r24	; 0x05
     d54:	0f c0       	rjmp	.+30     	; 0xd74 <CLCD_voidSendData+0xee>
     d56:	88 ec       	ldi	r24, 0xC8	; 200
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	9c 83       	std	Y+4, r25	; 0x04
     d5c:	8b 83       	std	Y+3, r24	; 0x03
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	9c 81       	ldd	r25, Y+4	; 0x04
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <CLCD_voidSendData+0xdc>
     d66:	9c 83       	std	Y+4, r25	; 0x04
     d68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d6a:	8d 81       	ldd	r24, Y+5	; 0x05
     d6c:	9e 81       	ldd	r25, Y+6	; 0x06
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	9e 83       	std	Y+6, r25	; 0x06
     d72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d74:	8d 81       	ldd	r24, Y+5	; 0x05
     d76:	9e 81       	ldd	r25, Y+6	; 0x06
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	69 f7       	brne	.-38     	; 0xd56 <CLCD_voidSendData+0xd0>
     d7c:	14 c0       	rjmp	.+40     	; 0xda6 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7e:	6f 81       	ldd	r22, Y+7	; 0x07
     d80:	78 85       	ldd	r23, Y+8	; 0x08
     d82:	89 85       	ldd	r24, Y+9	; 0x09
     d84:	9a 85       	ldd	r25, Y+10	; 0x0a
     d86:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	9e 83       	std	Y+6, r25	; 0x06
     d90:	8d 83       	std	Y+5, r24	; 0x05
     d92:	8d 81       	ldd	r24, Y+5	; 0x05
     d94:	9e 81       	ldd	r25, Y+6	; 0x06
     d96:	9a 83       	std	Y+2, r25	; 0x02
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	9a 81       	ldd	r25, Y+2	; 0x02
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <CLCD_voidSendData+0x118>
     da2:	9a 83       	std	Y+2, r25	; 0x02
     da4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     da6:	83 e4       	ldi	r24, 0x43	; 67
     da8:	62 e0       	ldi	r22, 0x02	; 2
     daa:	40 e0       	ldi	r20, 0x00	; 0
     dac:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
}
     db0:	2f 96       	adiw	r28, 0x0f	; 15
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <CLCD_voidInit>:
void CLCD_voidInit(void)
{
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	2e 97       	sbiw	r28, 0x0e	; 14
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	ac e0       	ldi	r26, 0x0C	; 12
     ddc:	b2 e4       	ldi	r27, 0x42	; 66
     dde:	8b 87       	std	Y+11, r24	; 0x0b
     de0:	9c 87       	std	Y+12, r25	; 0x0c
     de2:	ad 87       	std	Y+13, r26	; 0x0d
     de4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de6:	6b 85       	ldd	r22, Y+11	; 0x0b
     de8:	7c 85       	ldd	r23, Y+12	; 0x0c
     dea:	8d 85       	ldd	r24, Y+13	; 0x0d
     dec:	9e 85       	ldd	r25, Y+14	; 0x0e
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	4a ef       	ldi	r20, 0xFA	; 250
     df4:	54 e4       	ldi	r21, 0x44	; 68
     df6:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     dfa:	dc 01       	movw	r26, r24
     dfc:	cb 01       	movw	r24, r22
     dfe:	8f 83       	std	Y+7, r24	; 0x07
     e00:	98 87       	std	Y+8, r25	; 0x08
     e02:	a9 87       	std	Y+9, r26	; 0x09
     e04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e06:	6f 81       	ldd	r22, Y+7	; 0x07
     e08:	78 85       	ldd	r23, Y+8	; 0x08
     e0a:	89 85       	ldd	r24, Y+9	; 0x09
     e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	40 e8       	ldi	r20, 0x80	; 128
     e14:	5f e3       	ldi	r21, 0x3F	; 63
     e16:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
     e1a:	88 23       	and	r24, r24
     e1c:	2c f4       	brge	.+10     	; 0xe28 <CLCD_voidInit+0x66>
		__ticks = 1;
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	9e 83       	std	Y+6, r25	; 0x06
     e24:	8d 83       	std	Y+5, r24	; 0x05
     e26:	3f c0       	rjmp	.+126    	; 0xea6 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     e28:	6f 81       	ldd	r22, Y+7	; 0x07
     e2a:	78 85       	ldd	r23, Y+8	; 0x08
     e2c:	89 85       	ldd	r24, Y+9	; 0x09
     e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	3f ef       	ldi	r19, 0xFF	; 255
     e34:	4f e7       	ldi	r20, 0x7F	; 127
     e36:	57 e4       	ldi	r21, 0x47	; 71
     e38:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
     e3c:	18 16       	cp	r1, r24
     e3e:	4c f5       	brge	.+82     	; 0xe92 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e40:	6b 85       	ldd	r22, Y+11	; 0x0b
     e42:	7c 85       	ldd	r23, Y+12	; 0x0c
     e44:	8d 85       	ldd	r24, Y+13	; 0x0d
     e46:	9e 85       	ldd	r25, Y+14	; 0x0e
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	40 e2       	ldi	r20, 0x20	; 32
     e4e:	51 e4       	ldi	r21, 0x41	; 65
     e50:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	bc 01       	movw	r22, r24
     e5a:	cd 01       	movw	r24, r26
     e5c:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	9e 83       	std	Y+6, r25	; 0x06
     e66:	8d 83       	std	Y+5, r24	; 0x05
     e68:	0f c0       	rjmp	.+30     	; 0xe88 <CLCD_voidInit+0xc6>
     e6a:	88 ec       	ldi	r24, 0xC8	; 200
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	9c 83       	std	Y+4, r25	; 0x04
     e70:	8b 83       	std	Y+3, r24	; 0x03
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	9c 81       	ldd	r25, Y+4	; 0x04
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <CLCD_voidInit+0xb4>
     e7a:	9c 83       	std	Y+4, r25	; 0x04
     e7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7e:	8d 81       	ldd	r24, Y+5	; 0x05
     e80:	9e 81       	ldd	r25, Y+6	; 0x06
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	9e 83       	std	Y+6, r25	; 0x06
     e86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e88:	8d 81       	ldd	r24, Y+5	; 0x05
     e8a:	9e 81       	ldd	r25, Y+6	; 0x06
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	69 f7       	brne	.-38     	; 0xe6a <CLCD_voidInit+0xa8>
     e90:	14 c0       	rjmp	.+40     	; 0xeba <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e92:	6f 81       	ldd	r22, Y+7	; 0x07
     e94:	78 85       	ldd	r23, Y+8	; 0x08
     e96:	89 85       	ldd	r24, Y+9	; 0x09
     e98:	9a 85       	ldd	r25, Y+10	; 0x0a
     e9a:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	9e 83       	std	Y+6, r25	; 0x06
     ea4:	8d 83       	std	Y+5, r24	; 0x05
     ea6:	8d 81       	ldd	r24, Y+5	; 0x05
     ea8:	9e 81       	ldd	r25, Y+6	; 0x06
     eaa:	9a 83       	std	Y+2, r25	; 0x02
     eac:	89 83       	std	Y+1, r24	; 0x01
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	9a 81       	ldd	r25, Y+2	; 0x02
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <CLCD_voidInit+0xf0>
     eb6:	9a 83       	std	Y+2, r25	; 0x02
     eb8:	89 83       	std	Y+1, r24	; 0x01
	/*wait more than 15ms*/
	_delay_ms(35);
	/*function set command: no of lines 2 font size 5*8*/
	CLCD_voidSendCommand(0b00111000);
     eba:	88 e3       	ldi	r24, 0x38	; 56
     ebc:	0e 94 a5 05 	call	0xb4a	; 0xb4a <CLCD_voidSendCommand>
	/*Display ON/OFF control: DCB: D:1 for enable ,C:0 for disable cursor ,B:0 for no blinking*/
	CLCD_voidSendCommand(0b00001100);
     ec0:	8c e0       	ldi	r24, 0x0C	; 12
     ec2:	0e 94 a5 05 	call	0xb4a	; 0xb4a <CLCD_voidSendCommand>
	/*Clear display*/
	CLCD_voidSendCommand(1);
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	0e 94 a5 05 	call	0xb4a	; 0xb4a <CLCD_voidSendCommand>


}
     ecc:	2e 96       	adiw	r28, 0x0e	; 14
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <CLCD_voidSendString>:
void CLCD_voidSendString(const char* Copy_pcString)
{
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <CLCD_voidSendString+0x6>
     ee4:	0f 92       	push	r0
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	9b 83       	std	Y+3, r25	; 0x03
     eec:	8a 83       	std	Y+2, r24	; 0x02
	s8 Local_s8Counter=0;
     eee:	19 82       	std	Y+1, r1	; 0x01
     ef0:	10 c0       	rjmp	.+32     	; 0xf12 <CLCD_voidSendString+0x34>
	while(Copy_pcString[Local_s8Counter]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_s8Counter]);
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	28 2f       	mov	r18, r24
     ef6:	33 27       	eor	r19, r19
     ef8:	27 fd       	sbrc	r18, 7
     efa:	30 95       	com	r19
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	9b 81       	ldd	r25, Y+3	; 0x03
     f00:	fc 01       	movw	r30, r24
     f02:	e2 0f       	add	r30, r18
     f04:	f3 1f       	adc	r31, r19
     f06:	80 81       	ld	r24, Z
     f08:	0e 94 43 06 	call	0xc86	; 0xc86 <CLCD_voidSendData>
		Local_s8Counter++;
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	8f 5f       	subi	r24, 0xFF	; 255
     f10:	89 83       	std	Y+1, r24	; 0x01

}
void CLCD_voidSendString(const char* Copy_pcString)
{
	s8 Local_s8Counter=0;
	while(Copy_pcString[Local_s8Counter]!='\0')
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	28 2f       	mov	r18, r24
     f16:	33 27       	eor	r19, r19
     f18:	27 fd       	sbrc	r18, 7
     f1a:	30 95       	com	r19
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	9b 81       	ldd	r25, Y+3	; 0x03
     f20:	fc 01       	movw	r30, r24
     f22:	e2 0f       	add	r30, r18
     f24:	f3 1f       	adc	r31, r19
     f26:	80 81       	ld	r24, Z
     f28:	88 23       	and	r24, r24
     f2a:	19 f7       	brne	.-58     	; 0xef2 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_s8Counter]);
		Local_s8Counter++;
	}
}
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <CLCD_voidGoToXY>:
void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <CLCD_voidGoToXY+0x6>
     f3e:	0f 92       	push	r0
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	8a 83       	std	Y+2, r24	; 0x02
     f46:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress;
	if(Copy_u8XPos==0)
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	88 23       	and	r24, r24
     f4c:	19 f4       	brne	.+6      	; 0xf54 <CLCD_voidGoToXY+0x1c>
	{	/*Location is at first line*/
		Local_u8Adress=Copy_u8YPos;
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	89 83       	std	Y+1, r24	; 0x01
     f52:	06 c0       	rjmp	.+12     	; 0xf60 <CLCD_voidGoToXY+0x28>
	}
	else if (Copy_u8XPos==1)
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	19 f4       	brne	.+6      	; 0xf60 <CLCD_voidGoToXY+0x28>
	{	/*Location is at second line*/
		Local_u8Adress=Copy_u8YPos + 0x40;
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	80 5c       	subi	r24, 0xC0	; 192
     f5e:	89 83       	std	Y+1, r24	; 0x01
	}
	/*set bit number 7 for set DDRAM Address command then send the command*/
	CLCD_voidSendCommand(Local_u8Adress + 128);
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	80 58       	subi	r24, 0x80	; 128
     f64:	0e 94 a5 05 	call	0xb4a	; 0xb4a <CLCD_voidSendCommand>
}
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <CLCD_voidSpecialCharacter>:
void CLCD_voidSpecialCharacter(u8* Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	27 97       	sbiw	r28, 0x07	; 7
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	9c 83       	std	Y+4, r25	; 0x04
     f8a:	8b 83       	std	Y+3, r24	; 0x03
     f8c:	6d 83       	std	Y+5, r22	; 0x05
     f8e:	4e 83       	std	Y+6, r20	; 0x06
     f90:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0,Local_u8Iterator;
     f92:	1a 82       	std	Y+2, r1	; 0x02
	/*Calculate CGRAM Adress whose each block is 8 bytes*/
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
     f94:	8d 81       	ldd	r24, Y+5	; 0x05
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	8a 83       	std	Y+2, r24	; 0x02
	/*Set CG RAM address command to LCD , setting bit 6 to 1 and clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	80 5c       	subi	r24, 0xC0	; 192
     fac:	0e 94 a5 05 	call	0xb4a	; 0xb4a <CLCD_voidSendCommand>
	/*Write Pattern into CGRAM */
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
     fb0:	19 82       	std	Y+1, r1	; 0x01
     fb2:	0e c0       	rjmp	.+28     	; 0xfd0 <CLCD_voidSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	9c 81       	ldd	r25, Y+4	; 0x04
     fbe:	fc 01       	movw	r30, r24
     fc0:	e2 0f       	add	r30, r18
     fc2:	f3 1f       	adc	r31, r19
     fc4:	80 81       	ld	r24, Z
     fc6:	0e 94 43 06 	call	0xc86	; 0xc86 <CLCD_voidSendData>
	/*Calculate CGRAM Adress whose each block is 8 bytes*/
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
	/*Set CG RAM address command to LCD , setting bit 6 to 1 and clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
	/*Write Pattern into CGRAM */
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	8f 5f       	subi	r24, 0xFF	; 255
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	88 30       	cpi	r24, 0x08	; 8
     fd4:	78 f3       	brcs	.-34     	; 0xfb4 <CLCD_voidSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}
	/*Go back to DDRAM to display the pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
     fd6:	8e 81       	ldd	r24, Y+6	; 0x06
     fd8:	6f 81       	ldd	r22, Y+7	; 0x07
     fda:	0e 94 9c 07 	call	0xf38	; 0xf38 <CLCD_voidGoToXY>
	/*Display the Pattern Written in the CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
     fde:	8d 81       	ldd	r24, Y+5	; 0x05
     fe0:	0e 94 43 06 	call	0xc86	; 0xc86 <CLCD_voidSendData>



}
     fe4:	27 96       	adiw	r28, 0x07	; 7
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	08 95       	ret

00000ff6 <DIO_u8SetPinDirection>:
#include "DIO_register.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
     ff6:	df 93       	push	r29
     ff8:	cf 93       	push	r28
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	28 97       	sbiw	r28, 0x08	; 8
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	8a 83       	std	Y+2, r24	; 0x02
    100c:	6b 83       	std	Y+3, r22	; 0x03
    100e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1010:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	88 30       	cpi	r24, 0x08	; 8
    1016:	08 f0       	brcs	.+2      	; 0x101a <DIO_u8SetPinDirection+0x24>
    1018:	b5 c0       	rjmp	.+362    	; 0x1184 <DIO_u8SetPinDirection+0x18e>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	88 23       	and	r24, r24
    101e:	09 f0       	breq	.+2      	; 0x1022 <DIO_u8SetPinDirection+0x2c>
    1020:	57 c0       	rjmp	.+174    	; 0x10d0 <DIO_u8SetPinDirection+0xda>
		{
			switch(Copy_u8Port)
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	38 87       	std	Y+8, r19	; 0x08
    102a:	2f 83       	std	Y+7, r18	; 0x07
    102c:	8f 81       	ldd	r24, Y+7	; 0x07
    102e:	98 85       	ldd	r25, Y+8	; 0x08
    1030:	83 34       	cpi	r24, 0x43	; 67
    1032:	91 05       	cpc	r25, r1
    1034:	01 f1       	breq	.+64     	; 0x1076 <DIO_u8SetPinDirection+0x80>
    1036:	2f 81       	ldd	r18, Y+7	; 0x07
    1038:	38 85       	ldd	r19, Y+8	; 0x08
    103a:	24 34       	cpi	r18, 0x44	; 68
    103c:	31 05       	cpc	r19, r1
    103e:	81 f1       	breq	.+96     	; 0x10a0 <DIO_u8SetPinDirection+0xaa>
    1040:	8f 81       	ldd	r24, Y+7	; 0x07
    1042:	98 85       	ldd	r25, Y+8	; 0x08
    1044:	82 34       	cpi	r24, 0x42	; 66
    1046:	91 05       	cpc	r25, r1
    1048:	09 f0       	breq	.+2      	; 0x104c <DIO_u8SetPinDirection+0x56>
    104a:	3f c0       	rjmp	.+126    	; 0x10ca <DIO_u8SetPinDirection+0xd4>
			{
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    104c:	a4 e2       	ldi	r26, 0x24	; 36
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e4 e2       	ldi	r30, 0x24	; 36
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_u8SetPinDirection+0x74>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_u8SetPinDirection+0x70>
    106e:	80 95       	com	r24
    1070:	84 23       	and	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	89 c0       	rjmp	.+274    	; 0x1188 <DIO_u8SetPinDirection+0x192>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    1076:	a7 e2       	ldi	r26, 0x27	; 39
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e7 e2       	ldi	r30, 0x27	; 39
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO_u8SetPinDirection+0x9e>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <DIO_u8SetPinDirection+0x9a>
    1098:	80 95       	com	r24
    109a:	84 23       	and	r24, r20
    109c:	8c 93       	st	X, r24
    109e:	74 c0       	rjmp	.+232    	; 0x1188 <DIO_u8SetPinDirection+0x192>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    10a0:	aa e2       	ldi	r26, 0x2A	; 42
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	ea e2       	ldi	r30, 0x2A	; 42
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <DIO_u8SetPinDirection+0xc8>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <DIO_u8SetPinDirection+0xc4>
    10c2:	80 95       	com	r24
    10c4:	84 23       	and	r24, r20
    10c6:	8c 93       	st	X, r24
    10c8:	5f c0       	rjmp	.+190    	; 0x1188 <DIO_u8SetPinDirection+0x192>
			default:Local_u8ErrorState=1;break;
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	5c c0       	rjmp	.+184    	; 0x1188 <DIO_u8SetPinDirection+0x192>
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
    10d0:	8c 81       	ldd	r24, Y+4	; 0x04
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <DIO_u8SetPinDirection+0xe2>
    10d6:	53 c0       	rjmp	.+166    	; 0x117e <DIO_u8SetPinDirection+0x188>
		{
			switch(Copy_u8Port)
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	3e 83       	std	Y+6, r19	; 0x06
    10e0:	2d 83       	std	Y+5, r18	; 0x05
    10e2:	8d 81       	ldd	r24, Y+5	; 0x05
    10e4:	9e 81       	ldd	r25, Y+6	; 0x06
    10e6:	83 34       	cpi	r24, 0x43	; 67
    10e8:	91 05       	cpc	r25, r1
    10ea:	f1 f0       	breq	.+60     	; 0x1128 <DIO_u8SetPinDirection+0x132>
    10ec:	2d 81       	ldd	r18, Y+5	; 0x05
    10ee:	3e 81       	ldd	r19, Y+6	; 0x06
    10f0:	24 34       	cpi	r18, 0x44	; 68
    10f2:	31 05       	cpc	r19, r1
    10f4:	69 f1       	breq	.+90     	; 0x1150 <DIO_u8SetPinDirection+0x15a>
    10f6:	8d 81       	ldd	r24, Y+5	; 0x05
    10f8:	9e 81       	ldd	r25, Y+6	; 0x06
    10fa:	82 34       	cpi	r24, 0x42	; 66
    10fc:	91 05       	cpc	r25, r1
    10fe:	e1 f5       	brne	.+120    	; 0x1178 <DIO_u8SetPinDirection+0x182>
			{
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    1100:	a4 e2       	ldi	r26, 0x24	; 36
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e4 e2       	ldi	r30, 0x24	; 36
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <DIO_u8SetPinDirection+0x128>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <DIO_u8SetPinDirection+0x124>
    1122:	84 2b       	or	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	30 c0       	rjmp	.+96     	; 0x1188 <DIO_u8SetPinDirection+0x192>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    1128:	a7 e2       	ldi	r26, 0x27	; 39
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e7 e2       	ldi	r30, 0x27	; 39
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_u8SetPinDirection+0x150>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <DIO_u8SetPinDirection+0x14c>
    114a:	84 2b       	or	r24, r20
    114c:	8c 93       	st	X, r24
    114e:	1c c0       	rjmp	.+56     	; 0x1188 <DIO_u8SetPinDirection+0x192>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    1150:	aa e2       	ldi	r26, 0x2A	; 42
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	ea e2       	ldi	r30, 0x2A	; 42
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_u8SetPinDirection+0x178>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_u8SetPinDirection+0x174>
    1172:	84 2b       	or	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	08 c0       	rjmp	.+16     	; 0x1188 <DIO_u8SetPinDirection+0x192>
			default:Local_u8ErrorState=1;break;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	05 c0       	rjmp	.+10     	; 0x1188 <DIO_u8SetPinDirection+0x192>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_u8SetPinDirection+0x192>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1188:	89 81       	ldd	r24, Y+1	; 0x01
}
    118a:	28 96       	adiw	r28, 0x08	; 8
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	de bf       	out	0x3e, r29	; 62
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	cd bf       	out	0x3d, r28	; 61
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <DIO_u8SetPortDirection+0x6>
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <DIO_u8SetPortDirection+0x8>
    11a4:	0f 92       	push	r0
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	8a 83       	std	Y+2, r24	; 0x02
    11ac:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    11ae:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	3d 83       	std	Y+5, r19	; 0x05
    11b8:	2c 83       	std	Y+4, r18	; 0x04
    11ba:	8c 81       	ldd	r24, Y+4	; 0x04
    11bc:	9d 81       	ldd	r25, Y+5	; 0x05
    11be:	83 34       	cpi	r24, 0x43	; 67
    11c0:	91 05       	cpc	r25, r1
    11c2:	79 f0       	breq	.+30     	; 0x11e2 <DIO_u8SetPortDirection+0x46>
    11c4:	2c 81       	ldd	r18, Y+4	; 0x04
    11c6:	3d 81       	ldd	r19, Y+5	; 0x05
    11c8:	24 34       	cpi	r18, 0x44	; 68
    11ca:	31 05       	cpc	r19, r1
    11cc:	79 f0       	breq	.+30     	; 0x11ec <DIO_u8SetPortDirection+0x50>
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	9d 81       	ldd	r25, Y+5	; 0x05
    11d2:	82 34       	cpi	r24, 0x42	; 66
    11d4:	91 05       	cpc	r25, r1
    11d6:	79 f4       	brne	.+30     	; 0x11f6 <DIO_u8SetPortDirection+0x5a>
	{
	case DIO_u8PORTB: DDRB = Copy_u8Direction; break;
    11d8:	e4 e2       	ldi	r30, 0x24	; 36
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	80 83       	st	Z, r24
    11e0:	0c c0       	rjmp	.+24     	; 0x11fa <DIO_u8SetPortDirection+0x5e>
	case DIO_u8PORTC: DDRC = Copy_u8Direction; break;
    11e2:	e7 e2       	ldi	r30, 0x27	; 39
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	80 83       	st	Z, r24
    11ea:	07 c0       	rjmp	.+14     	; 0x11fa <DIO_u8SetPortDirection+0x5e>
	case DIO_u8PORTD: DDRD = Copy_u8Direction; break;
    11ec:	ea e2       	ldi	r30, 0x2A	; 42
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	80 83       	st	Z, r24
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_u8SetPortDirection+0x5e>
	default: Local_u8ErrorState=1;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    11fa:	89 81       	ldd	r24, Y+1	; 0x01

}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	28 97       	sbiw	r28, 0x08	; 8
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	8a 83       	std	Y+2, r24	; 0x02
    1222:	6b 83       	std	Y+3, r22	; 0x03
    1224:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1226:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	88 30       	cpi	r24, 0x08	; 8
    122c:	08 f0       	brcs	.+2      	; 0x1230 <DIO_u8SetPinValue+0x24>
    122e:	b5 c0       	rjmp	.+362    	; 0x139a <DIO_u8SetPinValue+0x18e>
	{
		if(Copy_u8Value==DIO_u8PIN_HIGH)
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	09 f0       	breq	.+2      	; 0x1238 <DIO_u8SetPinValue+0x2c>
    1236:	53 c0       	rjmp	.+166    	; 0x12de <DIO_u8SetPinValue+0xd2>
		{
			switch(Copy_u8Port)
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	38 87       	std	Y+8, r19	; 0x08
    1240:	2f 83       	std	Y+7, r18	; 0x07
    1242:	8f 81       	ldd	r24, Y+7	; 0x07
    1244:	98 85       	ldd	r25, Y+8	; 0x08
    1246:	83 34       	cpi	r24, 0x43	; 67
    1248:	91 05       	cpc	r25, r1
    124a:	f1 f0       	breq	.+60     	; 0x1288 <DIO_u8SetPinValue+0x7c>
    124c:	2f 81       	ldd	r18, Y+7	; 0x07
    124e:	38 85       	ldd	r19, Y+8	; 0x08
    1250:	24 34       	cpi	r18, 0x44	; 68
    1252:	31 05       	cpc	r19, r1
    1254:	69 f1       	breq	.+90     	; 0x12b0 <DIO_u8SetPinValue+0xa4>
    1256:	8f 81       	ldd	r24, Y+7	; 0x07
    1258:	98 85       	ldd	r25, Y+8	; 0x08
    125a:	82 34       	cpi	r24, 0x42	; 66
    125c:	91 05       	cpc	r25, r1
    125e:	e1 f5       	brne	.+120    	; 0x12d8 <DIO_u8SetPinValue+0xcc>
			{
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    1260:	a5 e2       	ldi	r26, 0x25	; 37
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e5 e2       	ldi	r30, 0x25	; 37
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <DIO_u8SetPinValue+0x72>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <DIO_u8SetPinValue+0x6e>
    1282:	84 2b       	or	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	8b c0       	rjmp	.+278    	; 0x139e <DIO_u8SetPinValue+0x192>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    1288:	a8 e2       	ldi	r26, 0x28	; 40
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e8 e2       	ldi	r30, 0x28	; 40
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_u8SetPinValue+0x9a>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_u8SetPinValue+0x96>
    12aa:	84 2b       	or	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	77 c0       	rjmp	.+238    	; 0x139e <DIO_u8SetPinValue+0x192>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    12b0:	ab e2       	ldi	r26, 0x2B	; 43
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	eb e2       	ldi	r30, 0x2B	; 43
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_u8SetPinValue+0xc2>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <DIO_u8SetPinValue+0xbe>
    12d2:	84 2b       	or	r24, r20
    12d4:	8c 93       	st	X, r24
    12d6:	63 c0       	rjmp	.+198    	; 0x139e <DIO_u8SetPinValue+0x192>
			default: Local_u8ErrorState=1;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	60 c0       	rjmp	.+192    	; 0x139e <DIO_u8SetPinValue+0x192>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
    12de:	8c 81       	ldd	r24, Y+4	; 0x04
    12e0:	88 23       	and	r24, r24
    12e2:	09 f0       	breq	.+2      	; 0x12e6 <DIO_u8SetPinValue+0xda>
    12e4:	57 c0       	rjmp	.+174    	; 0x1394 <DIO_u8SetPinValue+0x188>
		{
			switch(Copy_u8Port)
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	3e 83       	std	Y+6, r19	; 0x06
    12ee:	2d 83       	std	Y+5, r18	; 0x05
    12f0:	8d 81       	ldd	r24, Y+5	; 0x05
    12f2:	9e 81       	ldd	r25, Y+6	; 0x06
    12f4:	83 34       	cpi	r24, 0x43	; 67
    12f6:	91 05       	cpc	r25, r1
    12f8:	01 f1       	breq	.+64     	; 0x133a <DIO_u8SetPinValue+0x12e>
    12fa:	2d 81       	ldd	r18, Y+5	; 0x05
    12fc:	3e 81       	ldd	r19, Y+6	; 0x06
    12fe:	24 34       	cpi	r18, 0x44	; 68
    1300:	31 05       	cpc	r19, r1
    1302:	81 f1       	breq	.+96     	; 0x1364 <DIO_u8SetPinValue+0x158>
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	9e 81       	ldd	r25, Y+6	; 0x06
    1308:	82 34       	cpi	r24, 0x42	; 66
    130a:	91 05       	cpc	r25, r1
    130c:	09 f0       	breq	.+2      	; 0x1310 <DIO_u8SetPinValue+0x104>
    130e:	3f c0       	rjmp	.+126    	; 0x138e <DIO_u8SetPinValue+0x182>
			{
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    1310:	a5 e2       	ldi	r26, 0x25	; 37
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e5 e2       	ldi	r30, 0x25	; 37
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_u8SetPinValue+0x122>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_u8SetPinValue+0x11e>
    1332:	80 95       	com	r24
    1334:	84 23       	and	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	32 c0       	rjmp	.+100    	; 0x139e <DIO_u8SetPinValue+0x192>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    133a:	a8 e2       	ldi	r26, 0x28	; 40
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e8 e2       	ldi	r30, 0x28	; 40
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <DIO_u8SetPinValue+0x14c>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <DIO_u8SetPinValue+0x148>
    135c:	80 95       	com	r24
    135e:	84 23       	and	r24, r20
    1360:	8c 93       	st	X, r24
    1362:	1d c0       	rjmp	.+58     	; 0x139e <DIO_u8SetPinValue+0x192>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    1364:	ab e2       	ldi	r26, 0x2B	; 43
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	eb e2       	ldi	r30, 0x2B	; 43
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 2e       	mov	r0, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <DIO_u8SetPinValue+0x176>
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <DIO_u8SetPinValue+0x172>
    1386:	80 95       	com	r24
    1388:	84 23       	and	r24, r20
    138a:	8c 93       	st	X, r24
    138c:	08 c0       	rjmp	.+16     	; 0x139e <DIO_u8SetPinValue+0x192>
			default: Local_u8ErrorState=1;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	05 c0       	rjmp	.+10     	; 0x139e <DIO_u8SetPinValue+0x192>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_u8SetPinValue+0x192>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_u8ErrorState;
    139e:	89 81       	ldd	r24, Y+1	; 0x01

}
    13a0:	28 96       	adiw	r28, 0x08	; 8
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <DIO_u8SetPortValue+0x6>
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <DIO_u8SetPortValue+0x8>
    13ba:	0f 92       	push	r0
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	8a 83       	std	Y+2, r24	; 0x02
    13c2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    13c4:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	3d 83       	std	Y+5, r19	; 0x05
    13ce:	2c 83       	std	Y+4, r18	; 0x04
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	9d 81       	ldd	r25, Y+5	; 0x05
    13d4:	83 34       	cpi	r24, 0x43	; 67
    13d6:	91 05       	cpc	r25, r1
    13d8:	79 f0       	breq	.+30     	; 0x13f8 <DIO_u8SetPortValue+0x46>
    13da:	2c 81       	ldd	r18, Y+4	; 0x04
    13dc:	3d 81       	ldd	r19, Y+5	; 0x05
    13de:	24 34       	cpi	r18, 0x44	; 68
    13e0:	31 05       	cpc	r19, r1
    13e2:	79 f0       	breq	.+30     	; 0x1402 <DIO_u8SetPortValue+0x50>
    13e4:	8c 81       	ldd	r24, Y+4	; 0x04
    13e6:	9d 81       	ldd	r25, Y+5	; 0x05
    13e8:	82 34       	cpi	r24, 0x42	; 66
    13ea:	91 05       	cpc	r25, r1
    13ec:	79 f4       	brne	.+30     	; 0x140c <DIO_u8SetPortValue+0x5a>
	{
	case DIO_u8PORTB : PORTB =Copy_u8Value;break;
    13ee:	e5 e2       	ldi	r30, 0x25	; 37
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	80 83       	st	Z, r24
    13f6:	0c c0       	rjmp	.+24     	; 0x1410 <DIO_u8SetPortValue+0x5e>
	case DIO_u8PORTC : PORTC =Copy_u8Value;break;
    13f8:	e8 e2       	ldi	r30, 0x28	; 40
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	80 83       	st	Z, r24
    1400:	07 c0       	rjmp	.+14     	; 0x1410 <DIO_u8SetPortValue+0x5e>
	case DIO_u8PORTD : PORTD =Copy_u8Value;break;
    1402:	eb e2       	ldi	r30, 0x2B	; 43
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	80 83       	st	Z, r24
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_u8SetPortValue+0x5e>
	default: Local_u8ErrorState=1;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_u8ErrorState;
    1410:	89 81       	ldd	r24, Y+1	; 0x01

}
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	27 97       	sbiw	r28, 0x07	; 7
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
    1436:	8a 83       	std	Y+2, r24	; 0x02
    1438:	6b 83       	std	Y+3, r22	; 0x03
    143a:	5d 83       	std	Y+5, r21	; 0x05
    143c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    143e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value !=NULL && (Copy_u8Pin<= DIO_u8PIN7))
    1440:	8c 81       	ldd	r24, Y+4	; 0x04
    1442:	9d 81       	ldd	r25, Y+5	; 0x05
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	09 f4       	brne	.+2      	; 0x144a <DIO_u8GetPinValue+0x28>
    1448:	58 c0       	rjmp	.+176    	; 0x14fa <DIO_u8GetPinValue+0xd8>
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	88 30       	cpi	r24, 0x08	; 8
    144e:	08 f0       	brcs	.+2      	; 0x1452 <DIO_u8GetPinValue+0x30>
    1450:	54 c0       	rjmp	.+168    	; 0x14fa <DIO_u8GetPinValue+0xd8>
	{
		switch(Copy_u8Port)
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	3f 83       	std	Y+7, r19	; 0x07
    145a:	2e 83       	std	Y+6, r18	; 0x06
    145c:	4e 81       	ldd	r20, Y+6	; 0x06
    145e:	5f 81       	ldd	r21, Y+7	; 0x07
    1460:	43 34       	cpi	r20, 0x43	; 67
    1462:	51 05       	cpc	r21, r1
    1464:	f9 f0       	breq	.+62     	; 0x14a4 <DIO_u8GetPinValue+0x82>
    1466:	8e 81       	ldd	r24, Y+6	; 0x06
    1468:	9f 81       	ldd	r25, Y+7	; 0x07
    146a:	84 34       	cpi	r24, 0x44	; 68
    146c:	91 05       	cpc	r25, r1
    146e:	71 f1       	breq	.+92     	; 0x14cc <DIO_u8GetPinValue+0xaa>
    1470:	2e 81       	ldd	r18, Y+6	; 0x06
    1472:	3f 81       	ldd	r19, Y+7	; 0x07
    1474:	22 34       	cpi	r18, 0x42	; 66
    1476:	31 05       	cpc	r19, r1
    1478:	09 f0       	breq	.+2      	; 0x147c <DIO_u8GetPinValue+0x5a>
    147a:	3c c0       	rjmp	.+120    	; 0x14f4 <DIO_u8GetPinValue+0xd2>
		{
		case DIO_u8PORTB : *Copy_pu8Value =GET_BIT(PINB ,Copy_u8Pin);break;
    147c:	e3 e2       	ldi	r30, 0x23	; 35
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	88 2f       	mov	r24, r24
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	a9 01       	movw	r20, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <DIO_u8GetPinValue+0x72>
    1490:	55 95       	asr	r21
    1492:	47 95       	ror	r20
    1494:	8a 95       	dec	r24
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <DIO_u8GetPinValue+0x6e>
    1498:	ca 01       	movw	r24, r20
    149a:	81 70       	andi	r24, 0x01	; 1
    149c:	ec 81       	ldd	r30, Y+4	; 0x04
    149e:	fd 81       	ldd	r31, Y+5	; 0x05
    14a0:	80 83       	st	Z, r24
    14a2:	2d c0       	rjmp	.+90     	; 0x14fe <DIO_u8GetPinValue+0xdc>
		case DIO_u8PORTC : *Copy_pu8Value =GET_BIT(PINC ,Copy_u8Pin);break;
    14a4:	e6 e2       	ldi	r30, 0x26	; 38
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	88 2f       	mov	r24, r24
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	a9 01       	movw	r20, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <DIO_u8GetPinValue+0x9a>
    14b8:	55 95       	asr	r21
    14ba:	47 95       	ror	r20
    14bc:	8a 95       	dec	r24
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <DIO_u8GetPinValue+0x96>
    14c0:	ca 01       	movw	r24, r20
    14c2:	81 70       	andi	r24, 0x01	; 1
    14c4:	ec 81       	ldd	r30, Y+4	; 0x04
    14c6:	fd 81       	ldd	r31, Y+5	; 0x05
    14c8:	80 83       	st	Z, r24
    14ca:	19 c0       	rjmp	.+50     	; 0x14fe <DIO_u8GetPinValue+0xdc>
		case DIO_u8PORTD : *Copy_pu8Value =GET_BIT(PIND ,Copy_u8Pin);break;
    14cc:	e9 e2       	ldi	r30, 0x29	; 41
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	88 2f       	mov	r24, r24
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	a9 01       	movw	r20, r18
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <DIO_u8GetPinValue+0xc2>
    14e0:	55 95       	asr	r21
    14e2:	47 95       	ror	r20
    14e4:	8a 95       	dec	r24
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <DIO_u8GetPinValue+0xbe>
    14e8:	ca 01       	movw	r24, r20
    14ea:	81 70       	andi	r24, 0x01	; 1
    14ec:	ec 81       	ldd	r30, Y+4	; 0x04
    14ee:	fd 81       	ldd	r31, Y+5	; 0x05
    14f0:	80 83       	st	Z, r24
    14f2:	05 c0       	rjmp	.+10     	; 0x14fe <DIO_u8GetPinValue+0xdc>
		default: Local_u8ErrorState=1;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <DIO_u8GetPinValue+0xdc>
		}

	}
	else
	{
		Local_u8ErrorState=1;
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    14fe:	89 81       	ldd	r24, Y+1	; 0x01

}
    1500:	27 96       	adiw	r28, 0x07	; 7
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <main>:
#include "CLCD_config.h"
#include "util/delay.h"


void main(void)
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	c6 55       	subi	r28, 0x56	; 86
    151c:	d0 40       	sbci	r29, 0x00	; 0
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
	/*initialize LCD pins direction*/
	DIO_u8SetPortDirection(CLCD_DATA_PORT,DIO_u8PORT_OUTPUT);
    1528:	84 e4       	ldi	r24, 0x44	; 68
    152a:	6f ef       	ldi	r22, 0xFF	; 255
    152c:	0e 94 ce 08 	call	0x119c	; 0x119c <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_OUTPUT);
    1530:	83 e4       	ldi	r24, 0x43	; 67
    1532:	60 e0       	ldi	r22, 0x00	; 0
    1534:	41 e0       	ldi	r20, 0x01	; 1
    1536:	0e 94 fb 07 	call	0xff6	; 0xff6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_OUTPUT);
    153a:	83 e4       	ldi	r24, 0x43	; 67
    153c:	61 e0       	ldi	r22, 0x01	; 1
    153e:	41 e0       	ldi	r20, 0x01	; 1
    1540:	0e 94 fb 07 	call	0xff6	; 0xff6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_OUTPUT);
    1544:	83 e4       	ldi	r24, 0x43	; 67
    1546:	62 e0       	ldi	r22, 0x02	; 2
    1548:	41 e0       	ldi	r20, 0x01	; 1
    154a:	0e 94 fb 07 	call	0xff6	; 0xff6 <DIO_u8SetPinDirection>
	CLCD_voidInit();
    154e:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <CLCD_voidInit>
			0b00000100,
			0b00000000,
			0b00001110,
			0b00001010,
			0b00011110,
			0b00000000};
    1552:	88 e0       	ldi	r24, 0x08	; 8
    1554:	fe 01       	movw	r30, r28
    1556:	bd 96       	adiw	r30, 0x2d	; 45
    1558:	df 01       	movw	r26, r30
    155a:	28 2f       	mov	r18, r24
    155c:	1d 92       	st	X+, r1
    155e:	2a 95       	dec	r18
    1560:	e9 f7       	brne	.-6      	; 0x155c <main+0x4a>
    1562:	84 e0       	ldi	r24, 0x04	; 4
    1564:	8e a7       	std	Y+46, r24	; 0x2e
    1566:	8e e0       	ldi	r24, 0x0E	; 14
    1568:	88 ab       	std	Y+48, r24	; 0x30
    156a:	8a e0       	ldi	r24, 0x0A	; 10
    156c:	89 ab       	std	Y+49, r24	; 0x31
    156e:	8e e1       	ldi	r24, 0x1E	; 30
    1570:	8a ab       	std	Y+50, r24	; 0x32
			0b00000100,
			0b00000100,
			0b00000100,
			0b00000100,
			0b00000111,
			0b00000000};
    1572:	88 e0       	ldi	r24, 0x08	; 8
    1574:	fe 01       	movw	r30, r28
    1576:	f5 96       	adiw	r30, 0x35	; 53
    1578:	df 01       	movw	r26, r30
    157a:	28 2f       	mov	r18, r24
    157c:	1d 92       	st	X+, r1
    157e:	2a 95       	dec	r18
    1580:	e9 f7       	brne	.-6      	; 0x157c <main+0x6a>
    1582:	84 e0       	ldi	r24, 0x04	; 4
    1584:	8e ab       	std	Y+54, r24	; 0x36
    1586:	84 e0       	ldi	r24, 0x04	; 4
    1588:	8f ab       	std	Y+55, r24	; 0x37
    158a:	84 e0       	ldi	r24, 0x04	; 4
    158c:	88 af       	std	Y+56, r24	; 0x38
    158e:	84 e0       	ldi	r24, 0x04	; 4
    1590:	89 af       	std	Y+57, r24	; 0x39
    1592:	87 e0       	ldi	r24, 0x07	; 7
    1594:	8a af       	std	Y+58, r24	; 0x3a
			0b00000000,
			0b00000010,
			0b00000010,
			0b00000010,
			0b00000100,
			0b00001000};
    1596:	88 e0       	ldi	r24, 0x08	; 8
    1598:	fe 01       	movw	r30, r28
    159a:	fd 96       	adiw	r30, 0x3d	; 61
    159c:	df 01       	movw	r26, r30
    159e:	28 2f       	mov	r18, r24
    15a0:	1d 92       	st	X+, r1
    15a2:	2a 95       	dec	r18
    15a4:	e9 f7       	brne	.-6      	; 0x15a0 <main+0x8e>
    15a6:	82 e0       	ldi	r24, 0x02	; 2
    15a8:	8f af       	std	Y+63, r24	; 0x3f
    15aa:	82 e0       	ldi	r24, 0x02	; 2
    15ac:	fe 01       	movw	r30, r28
    15ae:	e0 5c       	subi	r30, 0xC0	; 192
    15b0:	ff 4f       	sbci	r31, 0xFF	; 255
    15b2:	80 83       	st	Z, r24
    15b4:	fe 01       	movw	r30, r28
    15b6:	ef 5b       	subi	r30, 0xBF	; 191
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	82 e0       	ldi	r24, 0x02	; 2
    15bc:	80 83       	st	Z, r24
    15be:	fe 01       	movw	r30, r28
    15c0:	ee 5b       	subi	r30, 0xBE	; 190
    15c2:	ff 4f       	sbci	r31, 0xFF	; 255
    15c4:	84 e0       	ldi	r24, 0x04	; 4
    15c6:	80 83       	st	Z, r24
    15c8:	fe 01       	movw	r30, r28
    15ca:	ed 5b       	subi	r30, 0xBD	; 189
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	88 e0       	ldi	r24, 0x08	; 8
    15d0:	80 83       	st	Z, r24
			0b00000000,
			0b00000000,
			0b00010101,
			0b00011111,
			0b00010000,
			0b00000000};
    15d2:	ce 01       	movw	r24, r28
    15d4:	8b 5b       	subi	r24, 0xBB	; 187
    15d6:	9f 4f       	sbci	r25, 0xFF	; 255
    15d8:	28 e0       	ldi	r18, 0x08	; 8
    15da:	fc 01       	movw	r30, r24
    15dc:	df 01       	movw	r26, r30
    15de:	32 2f       	mov	r19, r18
    15e0:	1d 92       	st	X+, r1
    15e2:	3a 95       	dec	r19
    15e4:	e9 f7       	brne	.-6      	; 0x15e0 <main+0xce>
    15e6:	fe 01       	movw	r30, r28
    15e8:	eb 5b       	subi	r30, 0xBB	; 187
    15ea:	ff 4f       	sbci	r31, 0xFF	; 255
    15ec:	85 e1       	ldi	r24, 0x15	; 21
    15ee:	83 83       	std	Z+3, r24	; 0x03
    15f0:	fe 01       	movw	r30, r28
    15f2:	eb 5b       	subi	r30, 0xBB	; 187
    15f4:	ff 4f       	sbci	r31, 0xFF	; 255
    15f6:	8f e1       	ldi	r24, 0x1F	; 31
    15f8:	84 83       	std	Z+4, r24	; 0x04
    15fa:	fe 01       	movw	r30, r28
    15fc:	eb 5b       	subi	r30, 0xBB	; 187
    15fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1600:	80 e1       	ldi	r24, 0x10	; 16
    1602:	85 83       	std	Z+5, r24	; 0x05
			0b00000000,
			0b00000000,
			0b00001000,
			0b00001000,
			0b00001111,
			0b00000000};
    1604:	ce 01       	movw	r24, r28
    1606:	83 5b       	subi	r24, 0xB3	; 179
    1608:	9f 4f       	sbci	r25, 0xFF	; 255
    160a:	28 e0       	ldi	r18, 0x08	; 8
    160c:	fc 01       	movw	r30, r24
    160e:	df 01       	movw	r26, r30
    1610:	32 2f       	mov	r19, r18
    1612:	1d 92       	st	X+, r1
    1614:	3a 95       	dec	r19
    1616:	e9 f7       	brne	.-6      	; 0x1612 <main+0x100>
    1618:	fe 01       	movw	r30, r28
    161a:	e3 5b       	subi	r30, 0xB3	; 179
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	88 e0       	ldi	r24, 0x08	; 8
    1620:	83 83       	std	Z+3, r24	; 0x03
    1622:	fe 01       	movw	r30, r28
    1624:	e3 5b       	subi	r30, 0xB3	; 179
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	88 e0       	ldi	r24, 0x08	; 8
    162a:	84 83       	std	Z+4, r24	; 0x04
    162c:	fe 01       	movw	r30, r28
    162e:	e3 5b       	subi	r30, 0xB3	; 179
    1630:	ff 4f       	sbci	r31, 0xFF	; 255
    1632:	8f e0       	ldi	r24, 0x0F	; 15
    1634:	85 83       	std	Z+5, r24	; 0x05

	while(1)
	{
		u8 Local_u8XPos=0;
    1636:	1c a6       	std	Y+44, r1	; 0x2c
		u8 Local_u8Iterator=0;
    1638:	1b a6       	std	Y+43, r1	; 0x2b
		for(Local_u8Iterator=0 ; Local_u8Iterator<11 ; Local_u8Iterator=Local_u8Iterator+5)
    163a:	1b a6       	std	Y+43, r1	; 0x2b
    163c:	5e c1       	rjmp	.+700    	; 0x18fa <main+0x3e8>
		{
			CLCD_voidInit();
    163e:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <CLCD_voidInit>

			switch (Local_u8XPos)
    1642:	8c a5       	ldd	r24, Y+44	; 0x2c
    1644:	a8 2f       	mov	r26, r24
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	67 96       	adiw	r28, 0x17	; 23
    164a:	bf af       	std	Y+63, r27	; 0x3f
    164c:	ae af       	std	Y+62, r26	; 0x3e
    164e:	67 97       	sbiw	r28, 0x17	; 23
    1650:	67 96       	adiw	r28, 0x17	; 23
    1652:	2e ad       	ldd	r18, Y+62	; 0x3e
    1654:	3f ad       	ldd	r19, Y+63	; 0x3f
    1656:	67 97       	sbiw	r28, 0x17	; 23
    1658:	21 15       	cp	r18, r1
    165a:	31 05       	cpc	r19, r1
    165c:	49 f0       	breq	.+18     	; 0x1670 <main+0x15e>
    165e:	67 96       	adiw	r28, 0x17	; 23
    1660:	8e ad       	ldd	r24, Y+62	; 0x3e
    1662:	9f ad       	ldd	r25, Y+63	; 0x3f
    1664:	67 97       	sbiw	r28, 0x17	; 23
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	91 05       	cpc	r25, r1
    166a:	09 f4       	brne	.+2      	; 0x166e <main+0x15c>
    166c:	a3 c0       	rjmp	.+326    	; 0x17b4 <main+0x2a2>
    166e:	42 c1       	rjmp	.+644    	; 0x18f4 <main+0x3e2>
			{
			case 0:
				CLCD_voidSpecialCharacter(char1,0,Local_u8XPos,4+Local_u8Iterator);
    1670:	8b a5       	ldd	r24, Y+43	; 0x2b
    1672:	28 2f       	mov	r18, r24
    1674:	2c 5f       	subi	r18, 0xFC	; 252
    1676:	ce 01       	movw	r24, r28
    1678:	8d 96       	adiw	r24, 0x2d	; 45
    167a:	60 e0       	ldi	r22, 0x00	; 0
    167c:	4c a5       	ldd	r20, Y+44	; 0x2c
    167e:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSpecialCharacter>
				CLCD_voidSpecialCharacter(char2,1,Local_u8XPos,3+Local_u8Iterator);
    1682:	8b a5       	ldd	r24, Y+43	; 0x2b
    1684:	28 2f       	mov	r18, r24
    1686:	2d 5f       	subi	r18, 0xFD	; 253
    1688:	ce 01       	movw	r24, r28
    168a:	c5 96       	adiw	r24, 0x35	; 53
    168c:	61 e0       	ldi	r22, 0x01	; 1
    168e:	4c a5       	ldd	r20, Y+44	; 0x2c
    1690:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSpecialCharacter>
				CLCD_voidSpecialCharacter(char3,2,Local_u8XPos,2+Local_u8Iterator);
    1694:	8b a5       	ldd	r24, Y+43	; 0x2b
    1696:	28 2f       	mov	r18, r24
    1698:	2e 5f       	subi	r18, 0xFE	; 254
    169a:	ce 01       	movw	r24, r28
    169c:	cd 96       	adiw	r24, 0x3d	; 61
    169e:	62 e0       	ldi	r22, 0x02	; 2
    16a0:	4c a5       	ldd	r20, Y+44	; 0x2c
    16a2:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSpecialCharacter>
				CLCD_voidSpecialCharacter(char4,3,Local_u8XPos,1+Local_u8Iterator);
    16a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    16a8:	28 2f       	mov	r18, r24
    16aa:	2f 5f       	subi	r18, 0xFF	; 255
    16ac:	ce 01       	movw	r24, r28
    16ae:	8b 5b       	subi	r24, 0xBB	; 187
    16b0:	9f 4f       	sbci	r25, 0xFF	; 255
    16b2:	63 e0       	ldi	r22, 0x03	; 3
    16b4:	4c a5       	ldd	r20, Y+44	; 0x2c
    16b6:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSpecialCharacter>
				CLCD_voidSpecialCharacter(char5,4,Local_u8XPos,0+Local_u8Iterator);
    16ba:	ce 01       	movw	r24, r28
    16bc:	83 5b       	subi	r24, 0xB3	; 179
    16be:	9f 4f       	sbci	r25, 0xFF	; 255
    16c0:	64 e0       	ldi	r22, 0x04	; 4
    16c2:	4c a5       	ldd	r20, Y+44	; 0x2c
    16c4:	2b a5       	ldd	r18, Y+43	; 0x2b
    16c6:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSpecialCharacter>
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	af e2       	ldi	r26, 0x2F	; 47
    16d0:	b4 e4       	ldi	r27, 0x44	; 68
    16d2:	8f a3       	std	Y+39, r24	; 0x27
    16d4:	98 a7       	std	Y+40, r25	; 0x28
    16d6:	a9 a7       	std	Y+41, r26	; 0x29
    16d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16da:	6f a1       	ldd	r22, Y+39	; 0x27
    16dc:	78 a5       	ldd	r23, Y+40	; 0x28
    16de:	89 a5       	ldd	r24, Y+41	; 0x29
    16e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	4a ef       	ldi	r20, 0xFA	; 250
    16e8:	54 e4       	ldi	r21, 0x44	; 68
    16ea:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	8b a3       	std	Y+35, r24	; 0x23
    16f4:	9c a3       	std	Y+36, r25	; 0x24
    16f6:	ad a3       	std	Y+37, r26	; 0x25
    16f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16fa:	6b a1       	ldd	r22, Y+35	; 0x23
    16fc:	7c a1       	ldd	r23, Y+36	; 0x24
    16fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1700:	9e a1       	ldd	r25, Y+38	; 0x26
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e8       	ldi	r20, 0x80	; 128
    1708:	5f e3       	ldi	r21, 0x3F	; 63
    170a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    170e:	88 23       	and	r24, r24
    1710:	2c f4       	brge	.+10     	; 0x171c <main+0x20a>
		__ticks = 1;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	9a a3       	std	Y+34, r25	; 0x22
    1718:	89 a3       	std	Y+33, r24	; 0x21
    171a:	3f c0       	rjmp	.+126    	; 0x179a <main+0x288>
	else if (__tmp > 65535)
    171c:	6b a1       	ldd	r22, Y+35	; 0x23
    171e:	7c a1       	ldd	r23, Y+36	; 0x24
    1720:	8d a1       	ldd	r24, Y+37	; 0x25
    1722:	9e a1       	ldd	r25, Y+38	; 0x26
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	3f ef       	ldi	r19, 0xFF	; 255
    1728:	4f e7       	ldi	r20, 0x7F	; 127
    172a:	57 e4       	ldi	r21, 0x47	; 71
    172c:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1730:	18 16       	cp	r1, r24
    1732:	4c f5       	brge	.+82     	; 0x1786 <main+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1734:	6f a1       	ldd	r22, Y+39	; 0x27
    1736:	78 a5       	ldd	r23, Y+40	; 0x28
    1738:	89 a5       	ldd	r24, Y+41	; 0x29
    173a:	9a a5       	ldd	r25, Y+42	; 0x2a
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e2       	ldi	r20, 0x20	; 32
    1742:	51 e4       	ldi	r21, 0x41	; 65
    1744:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	bc 01       	movw	r22, r24
    174e:	cd 01       	movw	r24, r26
    1750:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	9a a3       	std	Y+34, r25	; 0x22
    175a:	89 a3       	std	Y+33, r24	; 0x21
    175c:	0f c0       	rjmp	.+30     	; 0x177c <main+0x26a>
    175e:	88 ec       	ldi	r24, 0xC8	; 200
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	98 a3       	std	Y+32, r25	; 0x20
    1764:	8f 8f       	std	Y+31, r24	; 0x1f
    1766:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1768:	98 a1       	ldd	r25, Y+32	; 0x20
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <main+0x258>
    176e:	98 a3       	std	Y+32, r25	; 0x20
    1770:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1772:	89 a1       	ldd	r24, Y+33	; 0x21
    1774:	9a a1       	ldd	r25, Y+34	; 0x22
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	9a a3       	std	Y+34, r25	; 0x22
    177a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177c:	89 a1       	ldd	r24, Y+33	; 0x21
    177e:	9a a1       	ldd	r25, Y+34	; 0x22
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	69 f7       	brne	.-38     	; 0x175e <main+0x24c>
    1784:	14 c0       	rjmp	.+40     	; 0x17ae <main+0x29c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1786:	6b a1       	ldd	r22, Y+35	; 0x23
    1788:	7c a1       	ldd	r23, Y+36	; 0x24
    178a:	8d a1       	ldd	r24, Y+37	; 0x25
    178c:	9e a1       	ldd	r25, Y+38	; 0x26
    178e:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	9a a3       	std	Y+34, r25	; 0x22
    1798:	89 a3       	std	Y+33, r24	; 0x21
    179a:	89 a1       	ldd	r24, Y+33	; 0x21
    179c:	9a a1       	ldd	r25, Y+34	; 0x22
    179e:	9e 8f       	std	Y+30, r25	; 0x1e
    17a0:	8d 8f       	std	Y+29, r24	; 0x1d
    17a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	f1 f7       	brne	.-4      	; 0x17a6 <main+0x294>
    17aa:	9e 8f       	std	Y+30, r25	; 0x1e
    17ac:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(700);
				Local_u8XPos=1;
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	8c a7       	std	Y+44, r24	; 0x2c
    17b2:	a0 c0       	rjmp	.+320    	; 0x18f4 <main+0x3e2>
				break;
			case 1:
				CLCD_voidSpecialCharacter(char1,0,Local_u8XPos,4+Local_u8Iterator);
    17b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    17b6:	28 2f       	mov	r18, r24
    17b8:	2c 5f       	subi	r18, 0xFC	; 252
    17ba:	ce 01       	movw	r24, r28
    17bc:	8d 96       	adiw	r24, 0x2d	; 45
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	4c a5       	ldd	r20, Y+44	; 0x2c
    17c2:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSpecialCharacter>
				CLCD_voidSpecialCharacter(char2,1,Local_u8XPos,3+Local_u8Iterator);
    17c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    17c8:	28 2f       	mov	r18, r24
    17ca:	2d 5f       	subi	r18, 0xFD	; 253
    17cc:	ce 01       	movw	r24, r28
    17ce:	c5 96       	adiw	r24, 0x35	; 53
    17d0:	61 e0       	ldi	r22, 0x01	; 1
    17d2:	4c a5       	ldd	r20, Y+44	; 0x2c
    17d4:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSpecialCharacter>
				CLCD_voidSpecialCharacter(char3,2,Local_u8XPos,2+Local_u8Iterator);
    17d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    17da:	28 2f       	mov	r18, r24
    17dc:	2e 5f       	subi	r18, 0xFE	; 254
    17de:	ce 01       	movw	r24, r28
    17e0:	cd 96       	adiw	r24, 0x3d	; 61
    17e2:	62 e0       	ldi	r22, 0x02	; 2
    17e4:	4c a5       	ldd	r20, Y+44	; 0x2c
    17e6:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSpecialCharacter>
				CLCD_voidSpecialCharacter(char4,3,Local_u8XPos,1+Local_u8Iterator);
    17ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    17ec:	28 2f       	mov	r18, r24
    17ee:	2f 5f       	subi	r18, 0xFF	; 255
    17f0:	ce 01       	movw	r24, r28
    17f2:	8b 5b       	subi	r24, 0xBB	; 187
    17f4:	9f 4f       	sbci	r25, 0xFF	; 255
    17f6:	63 e0       	ldi	r22, 0x03	; 3
    17f8:	4c a5       	ldd	r20, Y+44	; 0x2c
    17fa:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSpecialCharacter>
				CLCD_voidSpecialCharacter(char5,4,Local_u8XPos,0+Local_u8Iterator);
    17fe:	ce 01       	movw	r24, r28
    1800:	83 5b       	subi	r24, 0xB3	; 179
    1802:	9f 4f       	sbci	r25, 0xFF	; 255
    1804:	64 e0       	ldi	r22, 0x04	; 4
    1806:	4c a5       	ldd	r20, Y+44	; 0x2c
    1808:	2b a5       	ldd	r18, Y+43	; 0x2b
    180a:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSpecialCharacter>
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	af e2       	ldi	r26, 0x2F	; 47
    1814:	b4 e4       	ldi	r27, 0x44	; 68
    1816:	89 8f       	std	Y+25, r24	; 0x19
    1818:	9a 8f       	std	Y+26, r25	; 0x1a
    181a:	ab 8f       	std	Y+27, r26	; 0x1b
    181c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181e:	69 8d       	ldd	r22, Y+25	; 0x19
    1820:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1822:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1824:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	4a ef       	ldi	r20, 0xFA	; 250
    182c:	54 e4       	ldi	r21, 0x44	; 68
    182e:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	8d 8b       	std	Y+21, r24	; 0x15
    1838:	9e 8b       	std	Y+22, r25	; 0x16
    183a:	af 8b       	std	Y+23, r26	; 0x17
    183c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    183e:	6d 89       	ldd	r22, Y+21	; 0x15
    1840:	7e 89       	ldd	r23, Y+22	; 0x16
    1842:	8f 89       	ldd	r24, Y+23	; 0x17
    1844:	98 8d       	ldd	r25, Y+24	; 0x18
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e8       	ldi	r20, 0x80	; 128
    184c:	5f e3       	ldi	r21, 0x3F	; 63
    184e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1852:	88 23       	and	r24, r24
    1854:	2c f4       	brge	.+10     	; 0x1860 <main+0x34e>
		__ticks = 1;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	9c 8b       	std	Y+20, r25	; 0x14
    185c:	8b 8b       	std	Y+19, r24	; 0x13
    185e:	3f c0       	rjmp	.+126    	; 0x18de <main+0x3cc>
	else if (__tmp > 65535)
    1860:	6d 89       	ldd	r22, Y+21	; 0x15
    1862:	7e 89       	ldd	r23, Y+22	; 0x16
    1864:	8f 89       	ldd	r24, Y+23	; 0x17
    1866:	98 8d       	ldd	r25, Y+24	; 0x18
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	3f ef       	ldi	r19, 0xFF	; 255
    186c:	4f e7       	ldi	r20, 0x7F	; 127
    186e:	57 e4       	ldi	r21, 0x47	; 71
    1870:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1874:	18 16       	cp	r1, r24
    1876:	4c f5       	brge	.+82     	; 0x18ca <main+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1878:	69 8d       	ldd	r22, Y+25	; 0x19
    187a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    187c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    187e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e2       	ldi	r20, 0x20	; 32
    1886:	51 e4       	ldi	r21, 0x41	; 65
    1888:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	bc 01       	movw	r22, r24
    1892:	cd 01       	movw	r24, r26
    1894:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	9c 8b       	std	Y+20, r25	; 0x14
    189e:	8b 8b       	std	Y+19, r24	; 0x13
    18a0:	0f c0       	rjmp	.+30     	; 0x18c0 <main+0x3ae>
    18a2:	88 ec       	ldi	r24, 0xC8	; 200
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	9a 8b       	std	Y+18, r25	; 0x12
    18a8:	89 8b       	std	Y+17, r24	; 0x11
    18aa:	89 89       	ldd	r24, Y+17	; 0x11
    18ac:	9a 89       	ldd	r25, Y+18	; 0x12
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <main+0x39c>
    18b2:	9a 8b       	std	Y+18, r25	; 0x12
    18b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b6:	8b 89       	ldd	r24, Y+19	; 0x13
    18b8:	9c 89       	ldd	r25, Y+20	; 0x14
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	9c 8b       	std	Y+20, r25	; 0x14
    18be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c0:	8b 89       	ldd	r24, Y+19	; 0x13
    18c2:	9c 89       	ldd	r25, Y+20	; 0x14
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	69 f7       	brne	.-38     	; 0x18a2 <main+0x390>
    18c8:	14 c0       	rjmp	.+40     	; 0x18f2 <main+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ca:	6d 89       	ldd	r22, Y+21	; 0x15
    18cc:	7e 89       	ldd	r23, Y+22	; 0x16
    18ce:	8f 89       	ldd	r24, Y+23	; 0x17
    18d0:	98 8d       	ldd	r25, Y+24	; 0x18
    18d2:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	9c 8b       	std	Y+20, r25	; 0x14
    18dc:	8b 8b       	std	Y+19, r24	; 0x13
    18de:	8b 89       	ldd	r24, Y+19	; 0x13
    18e0:	9c 89       	ldd	r25, Y+20	; 0x14
    18e2:	98 8b       	std	Y+16, r25	; 0x10
    18e4:	8f 87       	std	Y+15, r24	; 0x0f
    18e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e8:	98 89       	ldd	r25, Y+16	; 0x10
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <main+0x3d8>
    18ee:	98 8b       	std	Y+16, r25	; 0x10
    18f0:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(700);
				Local_u8XPos=0;
    18f2:	1c a6       	std	Y+44, r1	; 0x2c

	while(1)
	{
		u8 Local_u8XPos=0;
		u8 Local_u8Iterator=0;
		for(Local_u8Iterator=0 ; Local_u8Iterator<11 ; Local_u8Iterator=Local_u8Iterator+5)
    18f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    18f6:	8b 5f       	subi	r24, 0xFB	; 251
    18f8:	8b a7       	std	Y+43, r24	; 0x2b
    18fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    18fc:	8b 30       	cpi	r24, 0x0B	; 11
    18fe:	08 f4       	brcc	.+2      	; 0x1902 <main+0x3f0>
    1900:	9e ce       	rjmp	.-708    	; 0x163e <main+0x12c>
				Local_u8XPos=0;
				break;
			default : break;
			}
		}
		CLCD_voidInit();
    1902:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <CLCD_voidInit>
		CLCD_voidSpecialCharacter(char5,0,Local_u8XPos,-4-6+Local_u8Iterator);
    1906:	8b a5       	ldd	r24, Y+43	; 0x2b
    1908:	28 2f       	mov	r18, r24
    190a:	2a 50       	subi	r18, 0x0A	; 10
    190c:	ce 01       	movw	r24, r28
    190e:	83 5b       	subi	r24, 0xB3	; 179
    1910:	9f 4f       	sbci	r25, 0xFF	; 255
    1912:	60 e0       	ldi	r22, 0x00	; 0
    1914:	4c a5       	ldd	r20, Y+44	; 0x2c
    1916:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSpecialCharacter>
		CLCD_voidSpecialCharacter(char4,1,Local_u8XPos,-3-6+Local_u8Iterator);
    191a:	8b a5       	ldd	r24, Y+43	; 0x2b
    191c:	28 2f       	mov	r18, r24
    191e:	29 50       	subi	r18, 0x09	; 9
    1920:	ce 01       	movw	r24, r28
    1922:	8b 5b       	subi	r24, 0xBB	; 187
    1924:	9f 4f       	sbci	r25, 0xFF	; 255
    1926:	61 e0       	ldi	r22, 0x01	; 1
    1928:	4c a5       	ldd	r20, Y+44	; 0x2c
    192a:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSpecialCharacter>
		CLCD_voidSpecialCharacter(char3,2,Local_u8XPos,-2-6+Local_u8Iterator);
    192e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1930:	28 2f       	mov	r18, r24
    1932:	28 50       	subi	r18, 0x08	; 8
    1934:	ce 01       	movw	r24, r28
    1936:	cd 96       	adiw	r24, 0x3d	; 61
    1938:	62 e0       	ldi	r22, 0x02	; 2
    193a:	4c a5       	ldd	r20, Y+44	; 0x2c
    193c:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSpecialCharacter>
		CLCD_voidSpecialCharacter(char2,3,Local_u8XPos,-1-6+Local_u8Iterator);
    1940:	8b a5       	ldd	r24, Y+43	; 0x2b
    1942:	28 2f       	mov	r18, r24
    1944:	27 50       	subi	r18, 0x07	; 7
    1946:	ce 01       	movw	r24, r28
    1948:	c5 96       	adiw	r24, 0x35	; 53
    194a:	63 e0       	ldi	r22, 0x03	; 3
    194c:	4c a5       	ldd	r20, Y+44	; 0x2c
    194e:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSpecialCharacter>
		CLCD_voidSpecialCharacter(char1,4,Local_u8XPos,-6+Local_u8Iterator);
    1952:	8b a5       	ldd	r24, Y+43	; 0x2b
    1954:	28 2f       	mov	r18, r24
    1956:	26 50       	subi	r18, 0x06	; 6
    1958:	ce 01       	movw	r24, r28
    195a:	8d 96       	adiw	r24, 0x2d	; 45
    195c:	64 e0       	ldi	r22, 0x04	; 4
    195e:	4c a5       	ldd	r20, Y+44	; 0x2c
    1960:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSpecialCharacter>
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	af e2       	ldi	r26, 0x2F	; 47
    196a:	b4 e4       	ldi	r27, 0x44	; 68
    196c:	8b 87       	std	Y+11, r24	; 0x0b
    196e:	9c 87       	std	Y+12, r25	; 0x0c
    1970:	ad 87       	std	Y+13, r26	; 0x0d
    1972:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1974:	6b 85       	ldd	r22, Y+11	; 0x0b
    1976:	7c 85       	ldd	r23, Y+12	; 0x0c
    1978:	8d 85       	ldd	r24, Y+13	; 0x0d
    197a:	9e 85       	ldd	r25, Y+14	; 0x0e
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	4a ef       	ldi	r20, 0xFA	; 250
    1982:	54 e4       	ldi	r21, 0x44	; 68
    1984:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	8f 83       	std	Y+7, r24	; 0x07
    198e:	98 87       	std	Y+8, r25	; 0x08
    1990:	a9 87       	std	Y+9, r26	; 0x09
    1992:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1994:	6f 81       	ldd	r22, Y+7	; 0x07
    1996:	78 85       	ldd	r23, Y+8	; 0x08
    1998:	89 85       	ldd	r24, Y+9	; 0x09
    199a:	9a 85       	ldd	r25, Y+10	; 0x0a
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 e8       	ldi	r20, 0x80	; 128
    19a2:	5f e3       	ldi	r21, 0x3F	; 63
    19a4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    19a8:	88 23       	and	r24, r24
    19aa:	2c f4       	brge	.+10     	; 0x19b6 <main+0x4a4>
		__ticks = 1;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	9e 83       	std	Y+6, r25	; 0x06
    19b2:	8d 83       	std	Y+5, r24	; 0x05
    19b4:	3f c0       	rjmp	.+126    	; 0x1a34 <main+0x522>
	else if (__tmp > 65535)
    19b6:	6f 81       	ldd	r22, Y+7	; 0x07
    19b8:	78 85       	ldd	r23, Y+8	; 0x08
    19ba:	89 85       	ldd	r24, Y+9	; 0x09
    19bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	3f ef       	ldi	r19, 0xFF	; 255
    19c2:	4f e7       	ldi	r20, 0x7F	; 127
    19c4:	57 e4       	ldi	r21, 0x47	; 71
    19c6:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    19ca:	18 16       	cp	r1, r24
    19cc:	4c f5       	brge	.+82     	; 0x1a20 <main+0x50e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e2       	ldi	r20, 0x20	; 32
    19dc:	51 e4       	ldi	r21, 0x41	; 65
    19de:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	bc 01       	movw	r22, r24
    19e8:	cd 01       	movw	r24, r26
    19ea:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	9e 83       	std	Y+6, r25	; 0x06
    19f4:	8d 83       	std	Y+5, r24	; 0x05
    19f6:	0f c0       	rjmp	.+30     	; 0x1a16 <main+0x504>
    19f8:	88 ec       	ldi	r24, 0xC8	; 200
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9c 83       	std	Y+4, r25	; 0x04
    19fe:	8b 83       	std	Y+3, r24	; 0x03
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <main+0x4f2>
    1a08:	9c 83       	std	Y+4, r25	; 0x04
    1a0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	9e 83       	std	Y+6, r25	; 0x06
    1a14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a16:	8d 81       	ldd	r24, Y+5	; 0x05
    1a18:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	69 f7       	brne	.-38     	; 0x19f8 <main+0x4e6>
    1a1e:	0b ce       	rjmp	.-1002   	; 0x1636 <main+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a20:	6f 81       	ldd	r22, Y+7	; 0x07
    1a22:	78 85       	ldd	r23, Y+8	; 0x08
    1a24:	89 85       	ldd	r24, Y+9	; 0x09
    1a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a28:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	9e 83       	std	Y+6, r25	; 0x06
    1a32:	8d 83       	std	Y+5, r24	; 0x05
    1a34:	8d 81       	ldd	r24, Y+5	; 0x05
    1a36:	9e 81       	ldd	r25, Y+6	; 0x06
    1a38:	9a 83       	std	Y+2, r25	; 0x02
    1a3a:	89 83       	std	Y+1, r24	; 0x01
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <main+0x52e>
    1a44:	9a 83       	std	Y+2, r25	; 0x02
    1a46:	89 83       	std	Y+1, r24	; 0x01
    1a48:	f6 cd       	rjmp	.-1044   	; 0x1636 <main+0x124>

00001a4a <__prologue_saves__>:
    1a4a:	2f 92       	push	r2
    1a4c:	3f 92       	push	r3
    1a4e:	4f 92       	push	r4
    1a50:	5f 92       	push	r5
    1a52:	6f 92       	push	r6
    1a54:	7f 92       	push	r7
    1a56:	8f 92       	push	r8
    1a58:	9f 92       	push	r9
    1a5a:	af 92       	push	r10
    1a5c:	bf 92       	push	r11
    1a5e:	cf 92       	push	r12
    1a60:	df 92       	push	r13
    1a62:	ef 92       	push	r14
    1a64:	ff 92       	push	r15
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	ca 1b       	sub	r28, r26
    1a74:	db 0b       	sbc	r29, r27
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	09 94       	ijmp

00001a82 <__epilogue_restores__>:
    1a82:	2a 88       	ldd	r2, Y+18	; 0x12
    1a84:	39 88       	ldd	r3, Y+17	; 0x11
    1a86:	48 88       	ldd	r4, Y+16	; 0x10
    1a88:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a90:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a92:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a94:	b9 84       	ldd	r11, Y+9	; 0x09
    1a96:	c8 84       	ldd	r12, Y+8	; 0x08
    1a98:	df 80       	ldd	r13, Y+7	; 0x07
    1a9a:	ee 80       	ldd	r14, Y+6	; 0x06
    1a9c:	fd 80       	ldd	r15, Y+5	; 0x05
    1a9e:	0c 81       	ldd	r16, Y+4	; 0x04
    1aa0:	1b 81       	ldd	r17, Y+3	; 0x03
    1aa2:	aa 81       	ldd	r26, Y+2	; 0x02
    1aa4:	b9 81       	ldd	r27, Y+1	; 0x01
    1aa6:	ce 0f       	add	r28, r30
    1aa8:	d1 1d       	adc	r29, r1
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
    1ab4:	ed 01       	movw	r28, r26
    1ab6:	08 95       	ret

00001ab8 <_exit>:
    1ab8:	f8 94       	cli

00001aba <__stop_program>:
    1aba:	ff cf       	rjmp	.-2      	; 0x1aba <__stop_program>
